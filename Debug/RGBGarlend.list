
RGBGarlend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e4  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004480  08004480  00005480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c0  080044c0  00006090  2**0
                  CONTENTS
  4 .ARM          00000008  080044c0  080044c0  000054c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044c8  080044c8  00006090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c8  080044c8  000054c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044cc  080044cc  000054cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080044d0  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000090  08004560  00006090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08004560  00006308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008dce  00000000  00000000  000060c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001770  00000000  00000000  0000ee8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00010600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000077a  00000000  00000000  00010fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c92  00000000  00000000  0001172a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a58a  00000000  00000000  000273bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b7db  00000000  00000000  00031946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd121  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e54  00000000  00000000  000bd164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000bffb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004464 	.word	0x08004464

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08004464 	.word	0x08004464

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b04:	f000 b96a 	b.w	8000ddc <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9d08      	ldr	r5, [sp, #32]
 8000b26:	460c      	mov	r4, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14e      	bne.n	8000bca <__udivmoddi4+0xaa>
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	458c      	cmp	ip, r1
 8000b30:	4686      	mov	lr, r0
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	d962      	bls.n	8000bfe <__udivmoddi4+0xde>
 8000b38:	b14a      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3a:	f1c2 0320 	rsb	r3, r2, #32
 8000b3e:	4091      	lsls	r1, r2
 8000b40:	fa20 f303 	lsr.w	r3, r0, r3
 8000b44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b48:	4319      	orrs	r1, r3
 8000b4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f f68c 	uxth.w	r6, ip
 8000b56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b66:	fb04 f106 	mul.w	r1, r4, r6
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	d90a      	bls.n	8000b84 <__udivmoddi4+0x64>
 8000b6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b72:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b76:	f080 8112 	bcs.w	8000d9e <__udivmoddi4+0x27e>
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	f240 810f 	bls.w	8000d9e <__udivmoddi4+0x27e>
 8000b80:	3c02      	subs	r4, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	1a59      	subs	r1, r3, r1
 8000b86:	fa1f f38e 	uxth.w	r3, lr
 8000b8a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8e:	fb07 1110 	mls	r1, r7, r0, r1
 8000b92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b96:	fb00 f606 	mul.w	r6, r0, r6
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	d90a      	bls.n	8000bb4 <__udivmoddi4+0x94>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000ba6:	f080 80fc 	bcs.w	8000da2 <__udivmoddi4+0x282>
 8000baa:	429e      	cmp	r6, r3
 8000bac:	f240 80f9 	bls.w	8000da2 <__udivmoddi4+0x282>
 8000bb0:	4463      	add	r3, ip
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	1b9b      	subs	r3, r3, r6
 8000bb6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bba:	2100      	movs	r1, #0
 8000bbc:	b11d      	cbz	r5, 8000bc6 <__udivmoddi4+0xa6>
 8000bbe:	40d3      	lsrs	r3, r2
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d905      	bls.n	8000bda <__udivmoddi4+0xba>
 8000bce:	b10d      	cbz	r5, 8000bd4 <__udivmoddi4+0xb4>
 8000bd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e7f5      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000bda:	fab3 f183 	clz	r1, r3
 8000bde:	2900      	cmp	r1, #0
 8000be0:	d146      	bne.n	8000c70 <__udivmoddi4+0x150>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xcc>
 8000be6:	4290      	cmp	r0, r2
 8000be8:	f0c0 80f0 	bcc.w	8000dcc <__udivmoddi4+0x2ac>
 8000bec:	1a86      	subs	r6, r0, r2
 8000bee:	eb64 0303 	sbc.w	r3, r4, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d0e6      	beq.n	8000bc6 <__udivmoddi4+0xa6>
 8000bf8:	e9c5 6300 	strd	r6, r3, [r5]
 8000bfc:	e7e3      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	f040 8090 	bne.w	8000d24 <__udivmoddi4+0x204>
 8000c04:	eba1 040c 	sub.w	r4, r1, ip
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	fa1f f78c 	uxth.w	r7, ip
 8000c10:	2101      	movs	r1, #1
 8000c12:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c22:	fb07 f006 	mul.w	r0, r7, r6
 8000c26:	4298      	cmp	r0, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x11c>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x11a>
 8000c34:	4298      	cmp	r0, r3
 8000c36:	f200 80cd 	bhi.w	8000dd4 <__udivmoddi4+0x2b4>
 8000c3a:	4626      	mov	r6, r4
 8000c3c:	1a1c      	subs	r4, r3, r0
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c46:	fb08 4410 	mls	r4, r8, r0, r4
 8000c4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4e:	fb00 f707 	mul.w	r7, r0, r7
 8000c52:	429f      	cmp	r7, r3
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x148>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x146>
 8000c60:	429f      	cmp	r7, r3
 8000c62:	f200 80b0 	bhi.w	8000dc6 <__udivmoddi4+0x2a6>
 8000c66:	4620      	mov	r0, r4
 8000c68:	1bdb      	subs	r3, r3, r7
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0x9c>
 8000c70:	f1c1 0620 	rsb	r6, r1, #32
 8000c74:	408b      	lsls	r3, r1
 8000c76:	fa22 f706 	lsr.w	r7, r2, r6
 8000c7a:	431f      	orrs	r7, r3
 8000c7c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c80:	fa04 f301 	lsl.w	r3, r4, r1
 8000c84:	ea43 030c 	orr.w	r3, r3, ip
 8000c88:	40f4      	lsrs	r4, r6
 8000c8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8e:	0c38      	lsrs	r0, r7, #16
 8000c90:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c94:	fbb4 fef0 	udiv	lr, r4, r0
 8000c98:	fa1f fc87 	uxth.w	ip, r7
 8000c9c:	fb00 441e 	mls	r4, r0, lr, r4
 8000ca0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca4:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca8:	45a1      	cmp	r9, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	d90a      	bls.n	8000cc6 <__udivmoddi4+0x1a6>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cb6:	f080 8084 	bcs.w	8000dc2 <__udivmoddi4+0x2a2>
 8000cba:	45a1      	cmp	r9, r4
 8000cbc:	f240 8081 	bls.w	8000dc2 <__udivmoddi4+0x2a2>
 8000cc0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc4:	443c      	add	r4, r7
 8000cc6:	eba4 0409 	sub.w	r4, r4, r9
 8000cca:	fa1f f983 	uxth.w	r9, r3
 8000cce:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cd2:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cda:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cde:	45a4      	cmp	ip, r4
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x1d2>
 8000ce2:	193c      	adds	r4, r7, r4
 8000ce4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ce8:	d267      	bcs.n	8000dba <__udivmoddi4+0x29a>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0x29a>
 8000cee:	3b02      	subs	r3, #2
 8000cf0:	443c      	add	r4, r7
 8000cf2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf6:	fba0 9302 	umull	r9, r3, r0, r2
 8000cfa:	eba4 040c 	sub.w	r4, r4, ip
 8000cfe:	429c      	cmp	r4, r3
 8000d00:	46ce      	mov	lr, r9
 8000d02:	469c      	mov	ip, r3
 8000d04:	d351      	bcc.n	8000daa <__udivmoddi4+0x28a>
 8000d06:	d04e      	beq.n	8000da6 <__udivmoddi4+0x286>
 8000d08:	b155      	cbz	r5, 8000d20 <__udivmoddi4+0x200>
 8000d0a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d12:	fa04 f606 	lsl.w	r6, r4, r6
 8000d16:	40cb      	lsrs	r3, r1
 8000d18:	431e      	orrs	r6, r3
 8000d1a:	40cc      	lsrs	r4, r1
 8000d1c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d20:	2100      	movs	r1, #0
 8000d22:	e750      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000d24:	f1c2 0320 	rsb	r3, r2, #32
 8000d28:	fa20 f103 	lsr.w	r1, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa24 f303 	lsr.w	r3, r4, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	430c      	orrs	r4, r1
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d40:	fa1f f78c 	uxth.w	r7, ip
 8000d44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d48:	fb08 3110 	mls	r1, r8, r0, r3
 8000d4c:	0c23      	lsrs	r3, r4, #16
 8000d4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d52:	fb00 f107 	mul.w	r1, r0, r7
 8000d56:	4299      	cmp	r1, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x24c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d62:	d22c      	bcs.n	8000dbe <__udivmoddi4+0x29e>
 8000d64:	4299      	cmp	r1, r3
 8000d66:	d92a      	bls.n	8000dbe <__udivmoddi4+0x29e>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d74:	fb08 3311 	mls	r3, r8, r1, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb01 f307 	mul.w	r3, r1, r7
 8000d80:	42a3      	cmp	r3, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x276>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d8c:	d213      	bcs.n	8000db6 <__udivmoddi4+0x296>
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	d911      	bls.n	8000db6 <__udivmoddi4+0x296>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	1ae4      	subs	r4, r4, r3
 8000d98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d9c:	e739      	b.n	8000c12 <__udivmoddi4+0xf2>
 8000d9e:	4604      	mov	r4, r0
 8000da0:	e6f0      	b.n	8000b84 <__udivmoddi4+0x64>
 8000da2:	4608      	mov	r0, r1
 8000da4:	e706      	b.n	8000bb4 <__udivmoddi4+0x94>
 8000da6:	45c8      	cmp	r8, r9
 8000da8:	d2ae      	bcs.n	8000d08 <__udivmoddi4+0x1e8>
 8000daa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dae:	eb63 0c07 	sbc.w	ip, r3, r7
 8000db2:	3801      	subs	r0, #1
 8000db4:	e7a8      	b.n	8000d08 <__udivmoddi4+0x1e8>
 8000db6:	4631      	mov	r1, r6
 8000db8:	e7ed      	b.n	8000d96 <__udivmoddi4+0x276>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	e799      	b.n	8000cf2 <__udivmoddi4+0x1d2>
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	e7d4      	b.n	8000d6c <__udivmoddi4+0x24c>
 8000dc2:	46d6      	mov	lr, sl
 8000dc4:	e77f      	b.n	8000cc6 <__udivmoddi4+0x1a6>
 8000dc6:	4463      	add	r3, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e74d      	b.n	8000c68 <__udivmoddi4+0x148>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	4623      	mov	r3, r4
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e70f      	b.n	8000bf4 <__udivmoddi4+0xd4>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	e730      	b.n	8000c3c <__udivmoddi4+0x11c>
 8000dda:	bf00      	nop

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <RGB_LED_Init>:
#define GREEN_INTENSITY 2000.0
#define BLUE_INTENSITY 	1200.0

void RGB_LED_Init(RGB_LED_t *led, TIM_HandleTypeDef *tim,
		uint32_t r_tim_channel, uint32_t g_tim_channel, uint32_t b_tim_channel)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
	led->tim = tim;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	601a      	str	r2, [r3, #0]
	led->red_tim_channel = r_tim_channel;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	605a      	str	r2, [r3, #4]
	led->green_tim_channel = g_tim_channel;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	609a      	str	r2, [r3, #8]
	led->blue_tim_channel = b_tim_channel;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	60da      	str	r2, [r3, #12]
	led->hex_color = 0;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
	led->on = 0;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	751a      	strb	r2, [r3, #20]
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <RGB_LED_Update>:

static void RGB_LED_Update(RGB_LED_t *led)
{
 8000e20:	b5b0      	push	{r4, r5, r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	float r_brightness = (float)((led->hex_color & RED_MASK) >> 16) / 255.f;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	0c1b      	lsrs	r3, r3, #16
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	ee07 3a90 	vmov	s15, r3
 8000e34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e38:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 8001028 <RGB_LED_Update+0x208>
 8000e3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e40:	edc7 7a07 	vstr	s15, [r7, #28]
	float g_brightness = (float)((led->hex_color & GREEN_MASK) >> 8) / 255.f;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e54:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8001028 <RGB_LED_Update+0x208>
 8000e58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e5c:	edc7 7a06 	vstr	s15, [r7, #24]
	float b_brightness = (float)(led->hex_color & BLUE_MASK) / 255.f;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691b      	ldr	r3, [r3, #16]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	ee07 3a90 	vmov	s15, r3
 8000e6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e6e:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8001028 <RGB_LED_Update+0x208>
 8000e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e76:	edc7 7a05 	vstr	s15, [r7, #20]

	//g_brightness = scaleColor(g_brightness, 2000.f, 1200.f); // Scale to match the highest intensity (GREEN_INTENSITY)

	uint32_t r_pulse =
			(uint32_t)(pow(r_brightness, GAMMA) * led->tim->Init.Period);
 8000e7a:	69f8      	ldr	r0, [r7, #28]
 8000e7c:	f7ff fb10 	bl	80004a0 <__aeabi_f2d>
 8000e80:	4602      	mov	r2, r0
 8000e82:	460b      	mov	r3, r1
 8000e84:	ed9f 1b66 	vldr	d1, [pc, #408]	@ 8001020 <RGB_LED_Update+0x200>
 8000e88:	ec43 2b10 	vmov	d0, r2, r3
 8000e8c:	f002 fb8c 	bl	80035a8 <pow>
 8000e90:	ec55 4b10 	vmov	r4, r5, d0
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fade 	bl	800045c <__aeabi_ui2d>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	f7ff fb52 	bl	8000550 <__aeabi_dmul>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
	uint32_t r_pulse =
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f7ff fdfc 	bl	8000ab0 <__aeabi_d2uiz>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	613b      	str	r3, [r7, #16]
	uint32_t g_pulse =
			(uint32_t)(pow(g_brightness, GAMMA) * led->tim->Init.Period);
 8000ebc:	69b8      	ldr	r0, [r7, #24]
 8000ebe:	f7ff faef 	bl	80004a0 <__aeabi_f2d>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	ed9f 1b56 	vldr	d1, [pc, #344]	@ 8001020 <RGB_LED_Update+0x200>
 8000eca:	ec43 2b10 	vmov	d0, r2, r3
 8000ece:	f002 fb6b 	bl	80035a8 <pow>
 8000ed2:	ec55 4b10 	vmov	r4, r5, d0
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fabd 	bl	800045c <__aeabi_ui2d>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	4629      	mov	r1, r5
 8000eea:	f7ff fb31 	bl	8000550 <__aeabi_dmul>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
	uint32_t g_pulse =
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fddb 	bl	8000ab0 <__aeabi_d2uiz>
 8000efa:	4603      	mov	r3, r0
 8000efc:	60fb      	str	r3, [r7, #12]
	uint32_t b_pulse =
			(uint32_t)(pow(b_brightness, GAMMA) * led->tim->Init.Period);
 8000efe:	6978      	ldr	r0, [r7, #20]
 8000f00:	f7ff face 	bl	80004a0 <__aeabi_f2d>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 8001020 <RGB_LED_Update+0x200>
 8000f0c:	ec43 2b10 	vmov	d0, r2, r3
 8000f10:	f002 fb4a 	bl	80035a8 <pow>
 8000f14:	ec55 4b10 	vmov	r4, r5, d0
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fa9c 	bl	800045c <__aeabi_ui2d>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4620      	mov	r0, r4
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	f7ff fb10 	bl	8000550 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
	uint32_t b_pulse =
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fdba 	bl	8000ab0 <__aeabi_d2uiz>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COMPARE(led->tim, led->red_tim_channel, r_pulse);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d105      	bne.n	8000f54 <RGB_LED_Update+0x134>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f52:	e018      	b.n	8000f86 <RGB_LED_Update+0x166>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d105      	bne.n	8000f68 <RGB_LED_Update+0x148>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f66:	e00e      	b.n	8000f86 <RGB_LED_Update+0x166>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b08      	cmp	r3, #8
 8000f6e:	d105      	bne.n	8000f7c <RGB_LED_Update+0x15c>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f7a:	e004      	b.n	8000f86 <RGB_LED_Update+0x166>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(led->tim, led->green_tim_channel, g_pulse);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d105      	bne.n	8000f9a <RGB_LED_Update+0x17a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f98:	e018      	b.n	8000fcc <RGB_LED_Update+0x1ac>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d105      	bne.n	8000fae <RGB_LED_Update+0x18e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6393      	str	r3, [r2, #56]	@ 0x38
 8000fac:	e00e      	b.n	8000fcc <RGB_LED_Update+0x1ac>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2b08      	cmp	r3, #8
 8000fb4:	d105      	bne.n	8000fc2 <RGB_LED_Update+0x1a2>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000fc0:	e004      	b.n	8000fcc <RGB_LED_Update+0x1ac>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(led->tim, led->blue_tim_channel, b_pulse);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d105      	bne.n	8000fe0 <RGB_LED_Update+0x1c0>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8000fde:	e018      	b.n	8001012 <RGB_LED_Update+0x1f2>
	__HAL_TIM_SET_COMPARE(led->tim, led->blue_tim_channel, b_pulse);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b04      	cmp	r3, #4
 8000fe6:	d105      	bne.n	8000ff4 <RGB_LED_Update+0x1d4>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000ff2:	e00e      	b.n	8001012 <RGB_LED_Update+0x1f2>
	__HAL_TIM_SET_COMPARE(led->tim, led->blue_tim_channel, b_pulse);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d105      	bne.n	8001008 <RGB_LED_Update+0x1e8>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001006:	e004      	b.n	8001012 <RGB_LED_Update+0x1f2>
	__HAL_TIM_SET_COMPARE(led->tim, led->blue_tim_channel, b_pulse);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bdb0      	pop	{r4, r5, r7, pc}
 800101a:	bf00      	nop
 800101c:	f3af 8000 	nop.w
 8001020:	66666666 	.word	0x66666666
 8001024:	40066666 	.word	0x40066666
 8001028:	437f0000 	.word	0x437f0000

0800102c <RGB_LED_SetColor>:
void RGB_LED_SetColor(RGB_LED_t *led, uint32_t hex_color)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
	led->hex_color = hex_color;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	683a      	ldr	r2, [r7, #0]
 800103a:	611a      	str	r2, [r3, #16]
	if(led->on)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7d1b      	ldrb	r3, [r3, #20]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <RGB_LED_SetColor+0x1e>
		RGB_LED_Update(led);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff feeb 	bl	8000e20 <RGB_LED_Update>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <RGB_LED_On>:

void RGB_LED_On(RGB_LED_t *led)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
	led->on = 1;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	751a      	strb	r2, [r3, #20]
	RGB_LED_Update(led);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fedd 	bl	8000e20 <RGB_LED_Update>
	//RGB_LED_SetColor(led, led->hex_color);
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <interpolateColors>:
	__HAL_TIM_SET_COMPARE(led->tim, led->green_tim_channel, 0);
	__HAL_TIM_SET_COMPARE(led->tim, led->blue_tim_channel, 0);

}

uint32_t interpolateColors(uint32_t color1, uint32_t color2, float ratio) {
 800106e:	b480      	push	{r7}
 8001070:	b089      	sub	sp, #36	@ 0x24
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	ed87 0a01 	vstr	s0, [r7, #4]
      uint8_t r1 = (color1 >> 16) & 0xFF;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	0c1b      	lsrs	r3, r3, #16
 8001080:	77fb      	strb	r3, [r7, #31]
      uint8_t g1 = (color1 >> 8) & 0xFF;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	77bb      	strb	r3, [r7, #30]
      uint8_t b1 = color1 & 0xFF;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	777b      	strb	r3, [r7, #29]

      uint8_t r2 = (color2 >> 16) & 0xFF;
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	0c1b      	lsrs	r3, r3, #16
 8001090:	773b      	strb	r3, [r7, #28]
      uint8_t g2 = (color2 >> 8) & 0xFF;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	76fb      	strb	r3, [r7, #27]
      uint8_t b2 = color2 & 0xFF;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	76bb      	strb	r3, [r7, #26]

      uint8_t r = r1 + ratio * (r2 - r1);
 800109c:	7ffb      	ldrb	r3, [r7, #31]
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a6:	7f3a      	ldrb	r2, [r7, #28]
 80010a8:	7ffb      	ldrb	r3, [r7, #31]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c4:	edc7 7a00 	vstr	s15, [r7]
 80010c8:	783b      	ldrb	r3, [r7, #0]
 80010ca:	767b      	strb	r3, [r7, #25]
      uint8_t g = g1 + ratio * (g2 - g1);
 80010cc:	7fbb      	ldrb	r3, [r7, #30]
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d6:	7efa      	ldrb	r2, [r7, #27]
 80010d8:	7fbb      	ldrb	r3, [r7, #30]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f4:	edc7 7a00 	vstr	s15, [r7]
 80010f8:	783b      	ldrb	r3, [r7, #0]
 80010fa:	763b      	strb	r3, [r7, #24]
      uint8_t b = b1 + ratio * (b2 - b1);
 80010fc:	7f7b      	ldrb	r3, [r7, #29]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001106:	7eba      	ldrb	r2, [r7, #26]
 8001108:	7f7b      	ldrb	r3, [r7, #29]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001114:	edd7 7a01 	vldr	s15, [r7, #4]
 8001118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001124:	edc7 7a00 	vstr	s15, [r7]
 8001128:	783b      	ldrb	r3, [r7, #0]
 800112a:	75fb      	strb	r3, [r7, #23]

      return (r << 16) | (g << 8) | b;
 800112c:	7e7b      	ldrb	r3, [r7, #25]
 800112e:	041a      	lsls	r2, r3, #16
 8001130:	7e3b      	ldrb	r3, [r7, #24]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	431a      	orrs	r2, r3
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	4313      	orrs	r3, r2
  }
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	@ 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <RGB_LED_Gradient>:

void RGB_LED_Gradient(RGB_LED_t *led, uint32_t col1, uint32_t col2, float duration, float step)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b088      	sub	sp, #32
 800114a:	af00      	add	r7, sp, #0
 800114c:	6178      	str	r0, [r7, #20]
 800114e:	6139      	str	r1, [r7, #16]
 8001150:	60fa      	str	r2, [r7, #12]
 8001152:	ed87 0a02 	vstr	s0, [r7, #8]
 8001156:	edc7 0a01 	vstr	s1, [r7, #4]
	for(float t = 0; t < 1; t += step)
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	e01e      	b.n	80011a0 <RGB_LED_Gradient+0x5a>
	{
		uint32_t color = interpolateColors(col1, col2, t);
 8001162:	ed97 0a07 	vldr	s0, [r7, #28]
 8001166:	68f9      	ldr	r1, [r7, #12]
 8001168:	6938      	ldr	r0, [r7, #16]
 800116a:	f7ff ff80 	bl	800106e <interpolateColors>
 800116e:	61b8      	str	r0, [r7, #24]
		RGB_LED_SetColor(led, color);
 8001170:	69b9      	ldr	r1, [r7, #24]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff5a 	bl	800102c <RGB_LED_SetColor>
		HAL_Delay(duration / step);
 8001178:	edd7 6a02 	vldr	s13, [r7, #8]
 800117c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	f000 fd00 	bl	8001b90 <HAL_Delay>
	for(float t = 0; t < 1; t += step)
 8001190:	ed97 7a07 	vldr	s14, [r7, #28]
 8001194:	edd7 7a01 	vldr	s15, [r7, #4]
 8001198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119c:	edc7 7a07 	vstr	s15, [r7, #28]
 80011a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80011a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b0:	d4d7      	bmi.n	8001162 <RGB_LED_Gradient+0x1c>
	}
}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c2:	f000 fc73 	bl	8001aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c6:	f000 f88d 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ca:	f000 fa8d 	bl	80016e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011ce:	f000 f8e7 	bl	80013a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011d2:	f000 f971 	bl	80014b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011d6:	f000 f9fb 	bl	80015d0 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011da:	2100      	movs	r1, #0
 80011dc:	4838      	ldr	r0, [pc, #224]	@ (80012c0 <main+0x104>)
 80011de:	f001 fc31 	bl	8002a44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80011e2:	2104      	movs	r1, #4
 80011e4:	4836      	ldr	r0, [pc, #216]	@ (80012c0 <main+0x104>)
 80011e6:	f001 fc2d 	bl	8002a44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80011ea:	2108      	movs	r1, #8
 80011ec:	4834      	ldr	r0, [pc, #208]	@ (80012c0 <main+0x104>)
 80011ee:	f001 fc29 	bl	8002a44 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f2:	2100      	movs	r1, #0
 80011f4:	4833      	ldr	r0, [pc, #204]	@ (80012c4 <main+0x108>)
 80011f6:	f001 fc25 	bl	8002a44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80011fa:	2108      	movs	r1, #8
 80011fc:	4831      	ldr	r0, [pc, #196]	@ (80012c4 <main+0x108>)
 80011fe:	f001 fc21 	bl	8002a44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001202:	210c      	movs	r1, #12
 8001204:	482f      	ldr	r0, [pc, #188]	@ (80012c4 <main+0x108>)
 8001206:	f001 fc1d 	bl	8002a44 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800120a:	2100      	movs	r1, #0
 800120c:	482e      	ldr	r0, [pc, #184]	@ (80012c8 <main+0x10c>)
 800120e:	f001 fc19 	bl	8002a44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001212:	2108      	movs	r1, #8
 8001214:	482c      	ldr	r0, [pc, #176]	@ (80012c8 <main+0x10c>)
 8001216:	f001 fc15 	bl	8002a44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800121a:	210c      	movs	r1, #12
 800121c:	482a      	ldr	r0, [pc, #168]	@ (80012c8 <main+0x10c>)
 800121e:	f001 fc11 	bl	8002a44 <HAL_TIM_PWM_Start>



  RGB_LED_Init(&led1, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3);
 8001222:	2308      	movs	r3, #8
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2304      	movs	r3, #4
 8001228:	2200      	movs	r2, #0
 800122a:	4925      	ldr	r1, [pc, #148]	@ (80012c0 <main+0x104>)
 800122c:	4827      	ldr	r0, [pc, #156]	@ (80012cc <main+0x110>)
 800122e:	f7ff fdd7 	bl	8000de0 <RGB_LED_Init>
  RGB_LED_Init(&led2, &htim3, TIM_CHANNEL_1, TIM_CHANNEL_4, TIM_CHANNEL_3);
 8001232:	2308      	movs	r3, #8
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	230c      	movs	r3, #12
 8001238:	2200      	movs	r2, #0
 800123a:	4922      	ldr	r1, [pc, #136]	@ (80012c4 <main+0x108>)
 800123c:	4824      	ldr	r0, [pc, #144]	@ (80012d0 <main+0x114>)
 800123e:	f7ff fdcf 	bl	8000de0 <RGB_LED_Init>
  RGB_LED_Init(&led3, &htim4, TIM_CHANNEL_1, TIM_CHANNEL_4, TIM_CHANNEL_3);
 8001242:	2308      	movs	r3, #8
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	230c      	movs	r3, #12
 8001248:	2200      	movs	r2, #0
 800124a:	491f      	ldr	r1, [pc, #124]	@ (80012c8 <main+0x10c>)
 800124c:	4821      	ldr	r0, [pc, #132]	@ (80012d4 <main+0x118>)
 800124e:	f7ff fdc7 	bl	8000de0 <RGB_LED_Init>
  RGB_LED_On(&led1);
 8001252:	481e      	ldr	r0, [pc, #120]	@ (80012cc <main+0x110>)
 8001254:	f7ff fefd 	bl	8001052 <RGB_LED_On>
  RGB_LED_On(&led2);
 8001258:	481d      	ldr	r0, [pc, #116]	@ (80012d0 <main+0x114>)
 800125a:	f7ff fefa 	bl	8001052 <RGB_LED_On>
  RGB_LED_On(&led3);
 800125e:	481d      	ldr	r0, [pc, #116]	@ (80012d4 <main+0x118>)
 8001260:	f7ff fef7 	bl	8001052 <RGB_LED_On>
  while (1)
  {
    /* USER CODE END WHILE */
	for(uint8_t i = 0; i < colors_size - 1; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	e023      	b.n	80012b2 <main+0xf6>
	{
		RGB_LED_SetColor(&led1, colors[i]);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4a1a      	ldr	r2, [pc, #104]	@ (80012d8 <main+0x11c>)
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	4619      	mov	r1, r3
 8001274:	4815      	ldr	r0, [pc, #84]	@ (80012cc <main+0x110>)
 8001276:	f7ff fed9 	bl	800102c <RGB_LED_SetColor>
		RGB_LED_SetColor(&led3, colors[i]);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4a16      	ldr	r2, [pc, #88]	@ (80012d8 <main+0x11c>)
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	4619      	mov	r1, r3
 8001284:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <main+0x118>)
 8001286:	f7ff fed1 	bl	800102c <RGB_LED_SetColor>
		RGB_LED_Gradient(&led2, colors[i], colors[i + 1], 0.5, 0.01);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	4a12      	ldr	r2, [pc, #72]	@ (80012d8 <main+0x11c>)
 800128e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	3301      	adds	r3, #1
 8001296:	4a10      	ldr	r2, [pc, #64]	@ (80012d8 <main+0x11c>)
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80012dc <main+0x120>
 80012a0:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80012a4:	461a      	mov	r2, r3
 80012a6:	480a      	ldr	r0, [pc, #40]	@ (80012d0 <main+0x114>)
 80012a8:	f7ff ff4d 	bl	8001146 <RGB_LED_Gradient>
	for(uint8_t i = 0; i < colors_size - 1; i++)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	3301      	adds	r3, #1
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <main+0x124>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	429a      	cmp	r2, r3
 80012bc:	dbd5      	blt.n	800126a <main+0xae>
 80012be:	e7d1      	b.n	8001264 <main+0xa8>
 80012c0:	200000ac 	.word	0x200000ac
 80012c4:	200000f4 	.word	0x200000f4
 80012c8:	2000013c 	.word	0x2000013c
 80012cc:	20000184 	.word	0x20000184
 80012d0:	2000019c 	.word	0x2000019c
 80012d4:	200001b4 	.word	0x200001b4
 80012d8:	20000000 	.word	0x20000000
 80012dc:	3c23d70a 	.word	0x3c23d70a
 80012e0:	20000020 	.word	0x20000020

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	@ 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2230      	movs	r2, #48	@ 0x30
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 f926 	bl	8003544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b22      	ldr	r3, [pc, #136]	@ (8001398 <SystemClock_Config+0xb4>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	4a21      	ldr	r2, [pc, #132]	@ (8001398 <SystemClock_Config+0xb4>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	@ 0x40
 8001318:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <SystemClock_Config+0xb4>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <SystemClock_Config+0xb8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a1b      	ldr	r2, [pc, #108]	@ (800139c <SystemClock_Config+0xb8>)
 800132e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b19      	ldr	r3, [pc, #100]	@ (800139c <SystemClock_Config+0xb8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001340:	2302      	movs	r3, #2
 8001342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001344:	2301      	movs	r3, #1
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001348:	2310      	movs	r3, #16
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800134c:	2300      	movs	r3, #0
 800134e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fea9 	bl	80020ac <HAL_RCC_OscConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001360:	f000 f9f8 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001364:	230f      	movs	r3, #15
 8001366:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f001 f90c 	bl	800259c <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800138a:	f000 f9e3 	bl	8001754 <Error_Handler>
  }
}
 800138e:	bf00      	nop
 8001390:	3750      	adds	r7, #80	@ 0x50
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000

080013a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08e      	sub	sp, #56	@ 0x38
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
 80013cc:	615a      	str	r2, [r3, #20]
 80013ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d0:	4b38      	ldr	r3, [pc, #224]	@ (80014b4 <MX_TIM2_Init+0x114>)
 80013d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013d8:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <MX_TIM2_Init+0x114>)
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b35      	ldr	r3, [pc, #212]	@ (80014b4 <MX_TIM2_Init+0x114>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 80013e4:	4b33      	ldr	r3, [pc, #204]	@ (80014b4 <MX_TIM2_Init+0x114>)
 80013e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <MX_TIM2_Init+0x114>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <MX_TIM2_Init+0x114>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f8:	482e      	ldr	r0, [pc, #184]	@ (80014b4 <MX_TIM2_Init+0x114>)
 80013fa:	f001 fa7b 	bl	80028f4 <HAL_TIM_Base_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001404:	f000 f9a6 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800140e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001412:	4619      	mov	r1, r3
 8001414:	4827      	ldr	r0, [pc, #156]	@ (80014b4 <MX_TIM2_Init+0x114>)
 8001416:	f001 fc87 	bl	8002d28 <HAL_TIM_ConfigClockSource>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001420:	f000 f998 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001424:	4823      	ldr	r0, [pc, #140]	@ (80014b4 <MX_TIM2_Init+0x114>)
 8001426:	f001 fab4 	bl	8002992 <HAL_TIM_PWM_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001430:	f000 f990 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	4619      	mov	r1, r3
 8001442:	481c      	ldr	r0, [pc, #112]	@ (80014b4 <MX_TIM2_Init+0x114>)
 8001444:	f002 f810 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800144e:	f000 f981 	bl	8001754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001452:	2360      	movs	r3, #96	@ 0x60
 8001454:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 8001456:	23ff      	movs	r3, #255	@ 0xff
 8001458:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	4619      	mov	r1, r3
 8001468:	4812      	ldr	r0, [pc, #72]	@ (80014b4 <MX_TIM2_Init+0x114>)
 800146a:	f001 fb9b 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001474:	f000 f96e 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2204      	movs	r2, #4
 800147c:	4619      	mov	r1, r3
 800147e:	480d      	ldr	r0, [pc, #52]	@ (80014b4 <MX_TIM2_Init+0x114>)
 8001480:	f001 fb90 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800148a:	f000 f963 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2208      	movs	r2, #8
 8001492:	4619      	mov	r1, r3
 8001494:	4807      	ldr	r0, [pc, #28]	@ (80014b4 <MX_TIM2_Init+0x114>)
 8001496:	f001 fb85 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80014a0:	f000 f958 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014a4:	4803      	ldr	r0, [pc, #12]	@ (80014b4 <MX_TIM2_Init+0x114>)
 80014a6:	f000 f9cf 	bl	8001848 <HAL_TIM_MspPostInit>

}
 80014aa:	bf00      	nop
 80014ac:	3738      	adds	r7, #56	@ 0x38
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200000ac 	.word	0x200000ac

080014b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	@ 0x38
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
 80014e4:	615a      	str	r2, [r3, #20]
 80014e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014e8:	4b37      	ldr	r3, [pc, #220]	@ (80015c8 <MX_TIM3_Init+0x110>)
 80014ea:	4a38      	ldr	r2, [pc, #224]	@ (80015cc <MX_TIM3_Init+0x114>)
 80014ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014ee:	4b36      	ldr	r3, [pc, #216]	@ (80015c8 <MX_TIM3_Init+0x110>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b34      	ldr	r3, [pc, #208]	@ (80015c8 <MX_TIM3_Init+0x110>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024;
 80014fa:	4b33      	ldr	r3, [pc, #204]	@ (80015c8 <MX_TIM3_Init+0x110>)
 80014fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001500:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001502:	4b31      	ldr	r3, [pc, #196]	@ (80015c8 <MX_TIM3_Init+0x110>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001508:	4b2f      	ldr	r3, [pc, #188]	@ (80015c8 <MX_TIM3_Init+0x110>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800150e:	482e      	ldr	r0, [pc, #184]	@ (80015c8 <MX_TIM3_Init+0x110>)
 8001510:	f001 f9f0 	bl	80028f4 <HAL_TIM_Base_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800151a:	f000 f91b 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001524:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001528:	4619      	mov	r1, r3
 800152a:	4827      	ldr	r0, [pc, #156]	@ (80015c8 <MX_TIM3_Init+0x110>)
 800152c:	f001 fbfc 	bl	8002d28 <HAL_TIM_ConfigClockSource>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001536:	f000 f90d 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800153a:	4823      	ldr	r0, [pc, #140]	@ (80015c8 <MX_TIM3_Init+0x110>)
 800153c:	f001 fa29 	bl	8002992 <HAL_TIM_PWM_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001546:	f000 f905 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001552:	f107 0320 	add.w	r3, r7, #32
 8001556:	4619      	mov	r1, r3
 8001558:	481b      	ldr	r0, [pc, #108]	@ (80015c8 <MX_TIM3_Init+0x110>)
 800155a:	f001 ff85 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001564:	f000 f8f6 	bl	8001754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001568:	2360      	movs	r3, #96	@ 0x60
 800156a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 800156c:	23ff      	movs	r3, #255	@ 0xff
 800156e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	4812      	ldr	r0, [pc, #72]	@ (80015c8 <MX_TIM3_Init+0x110>)
 8001580:	f001 fb10 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800158a:	f000 f8e3 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2208      	movs	r2, #8
 8001592:	4619      	mov	r1, r3
 8001594:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <MX_TIM3_Init+0x110>)
 8001596:	f001 fb05 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80015a0:	f000 f8d8 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	220c      	movs	r2, #12
 80015a8:	4619      	mov	r1, r3
 80015aa:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <MX_TIM3_Init+0x110>)
 80015ac:	f001 fafa 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80015b6:	f000 f8cd 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015ba:	4803      	ldr	r0, [pc, #12]	@ (80015c8 <MX_TIM3_Init+0x110>)
 80015bc:	f000 f944 	bl	8001848 <HAL_TIM_MspPostInit>

}
 80015c0:	bf00      	nop
 80015c2:	3738      	adds	r7, #56	@ 0x38
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200000f4 	.word	0x200000f4
 80015cc:	40000400 	.word	0x40000400

080015d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08e      	sub	sp, #56	@ 0x38
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	f107 0320 	add.w	r3, r7, #32
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
 80015fc:	615a      	str	r2, [r3, #20]
 80015fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001600:	4b37      	ldr	r3, [pc, #220]	@ (80016e0 <MX_TIM4_Init+0x110>)
 8001602:	4a38      	ldr	r2, [pc, #224]	@ (80016e4 <MX_TIM4_Init+0x114>)
 8001604:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001606:	4b36      	ldr	r3, [pc, #216]	@ (80016e0 <MX_TIM4_Init+0x110>)
 8001608:	2200      	movs	r2, #0
 800160a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b34      	ldr	r3, [pc, #208]	@ (80016e0 <MX_TIM4_Init+0x110>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 8001612:	4b33      	ldr	r3, [pc, #204]	@ (80016e0 <MX_TIM4_Init+0x110>)
 8001614:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001618:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b31      	ldr	r3, [pc, #196]	@ (80016e0 <MX_TIM4_Init+0x110>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b2f      	ldr	r3, [pc, #188]	@ (80016e0 <MX_TIM4_Init+0x110>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001626:	482e      	ldr	r0, [pc, #184]	@ (80016e0 <MX_TIM4_Init+0x110>)
 8001628:	f001 f964 	bl	80028f4 <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001632:	f000 f88f 	bl	8001754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800163a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800163c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001640:	4619      	mov	r1, r3
 8001642:	4827      	ldr	r0, [pc, #156]	@ (80016e0 <MX_TIM4_Init+0x110>)
 8001644:	f001 fb70 	bl	8002d28 <HAL_TIM_ConfigClockSource>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800164e:	f000 f881 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001652:	4823      	ldr	r0, [pc, #140]	@ (80016e0 <MX_TIM4_Init+0x110>)
 8001654:	f001 f99d 	bl	8002992 <HAL_TIM_PWM_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800165e:	f000 f879 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	4619      	mov	r1, r3
 8001670:	481b      	ldr	r0, [pc, #108]	@ (80016e0 <MX_TIM4_Init+0x110>)
 8001672:	f001 fef9 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800167c:	f000 f86a 	bl	8001754 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001680:	2360      	movs	r3, #96	@ 0x60
 8001682:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 255;
 8001684:	23ff      	movs	r3, #255	@ 0xff
 8001686:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2200      	movs	r2, #0
 8001694:	4619      	mov	r1, r3
 8001696:	4812      	ldr	r0, [pc, #72]	@ (80016e0 <MX_TIM4_Init+0x110>)
 8001698:	f001 fa84 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80016a2:	f000 f857 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2208      	movs	r2, #8
 80016aa:	4619      	mov	r1, r3
 80016ac:	480c      	ldr	r0, [pc, #48]	@ (80016e0 <MX_TIM4_Init+0x110>)
 80016ae:	f001 fa79 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80016b8:	f000 f84c 	bl	8001754 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	220c      	movs	r2, #12
 80016c0:	4619      	mov	r1, r3
 80016c2:	4807      	ldr	r0, [pc, #28]	@ (80016e0 <MX_TIM4_Init+0x110>)
 80016c4:	f001 fa6e 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80016ce:	f000 f841 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016d2:	4803      	ldr	r0, [pc, #12]	@ (80016e0 <MX_TIM4_Init+0x110>)
 80016d4:	f000 f8b8 	bl	8001848 <HAL_TIM_MspPostInit>

}
 80016d8:	bf00      	nop
 80016da:	3738      	adds	r7, #56	@ 0x38
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000013c 	.word	0x2000013c
 80016e4:	40000800 	.word	0x40000800

080016e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <MX_GPIO_Init+0x68>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a16      	ldr	r2, [pc, #88]	@ (8001750 <MX_GPIO_Init+0x68>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <MX_GPIO_Init+0x68>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <MX_GPIO_Init+0x68>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a0f      	ldr	r2, [pc, #60]	@ (8001750 <MX_GPIO_Init+0x68>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <MX_GPIO_Init+0x68>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <MX_GPIO_Init+0x68>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a08      	ldr	r2, [pc, #32]	@ (8001750 <MX_GPIO_Init+0x68>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <MX_GPIO_Init+0x68>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <Error_Handler+0x8>

08001760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b10      	ldr	r3, [pc, #64]	@ (80017ac <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <HAL_MspInit+0x4c>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001774:	6453      	str	r3, [r2, #68]	@ 0x44
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <HAL_MspInit+0x4c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a08      	ldr	r2, [pc, #32]	@ (80017ac <HAL_MspInit+0x4c>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_MspInit+0x4c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017c0:	d10e      	bne.n	80017e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	4b1d      	ldr	r3, [pc, #116]	@ (800183c <HAL_TIM_Base_MspInit+0x8c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	4a1c      	ldr	r2, [pc, #112]	@ (800183c <HAL_TIM_Base_MspInit+0x8c>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d2:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <HAL_TIM_Base_MspInit+0x8c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017de:	e026      	b.n	800182e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a16      	ldr	r2, [pc, #88]	@ (8001840 <HAL_TIM_Base_MspInit+0x90>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d10e      	bne.n	8001808 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b13      	ldr	r3, [pc, #76]	@ (800183c <HAL_TIM_Base_MspInit+0x8c>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	4a12      	ldr	r2, [pc, #72]	@ (800183c <HAL_TIM_Base_MspInit+0x8c>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <HAL_TIM_Base_MspInit+0x8c>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
}
 8001806:	e012      	b.n	800182e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <HAL_TIM_Base_MspInit+0x94>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10d      	bne.n	800182e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_TIM_Base_MspInit+0x8c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	4a08      	ldr	r2, [pc, #32]	@ (800183c <HAL_TIM_Base_MspInit+0x8c>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6413      	str	r3, [r2, #64]	@ 0x40
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_TIM_Base_MspInit+0x8c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
}
 800182e:	bf00      	nop
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	40000400 	.word	0x40000400
 8001844:	40000800 	.word	0x40000800

08001848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	@ 0x30
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001868:	d13d      	bne.n	80018e6 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	4b53      	ldr	r3, [pc, #332]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a52      	ldr	r2, [pc, #328]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b50      	ldr	r3, [pc, #320]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	4b4c      	ldr	r3, [pc, #304]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a4b      	ldr	r2, [pc, #300]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b49      	ldr	r3, [pc, #292]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018a2:	2320      	movs	r3, #32
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018b2:	2301      	movs	r3, #1
 80018b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4840      	ldr	r0, [pc, #256]	@ (80019c0 <HAL_TIM_MspPostInit+0x178>)
 80018be:	f000 fa71 	bl	8001da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80018c2:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018d4:	2301      	movs	r3, #1
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4839      	ldr	r0, [pc, #228]	@ (80019c4 <HAL_TIM_MspPostInit+0x17c>)
 80018e0:	f000 fa60 	bl	8001da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018e4:	e066      	b.n	80019b4 <HAL_TIM_MspPostInit+0x16c>
  else if(htim->Instance==TIM3)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a37      	ldr	r2, [pc, #220]	@ (80019c8 <HAL_TIM_MspPostInit+0x180>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d13d      	bne.n	800196c <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f8:	4a30      	ldr	r2, [pc, #192]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001900:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	4b2a      	ldr	r3, [pc, #168]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	4a29      	ldr	r2, [pc, #164]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	6313      	str	r3, [r2, #48]	@ 0x30
 800191c:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001928:	2340      	movs	r3, #64	@ 0x40
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001938:	2302      	movs	r3, #2
 800193a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4619      	mov	r1, r3
 8001942:	481f      	ldr	r0, [pc, #124]	@ (80019c0 <HAL_TIM_MspPostInit+0x178>)
 8001944:	f000 fa2e 	bl	8001da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001948:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800195a:	2302      	movs	r3, #2
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	4819      	ldr	r0, [pc, #100]	@ (80019cc <HAL_TIM_MspPostInit+0x184>)
 8001966:	f000 fa1d 	bl	8001da4 <HAL_GPIO_Init>
}
 800196a:	e023      	b.n	80019b4 <HAL_TIM_MspPostInit+0x16c>
  else if(htim->Instance==TIM4)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a17      	ldr	r2, [pc, #92]	@ (80019d0 <HAL_TIM_MspPostInit+0x188>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d11e      	bne.n	80019b4 <HAL_TIM_MspPostInit+0x16c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a0f      	ldr	r2, [pc, #60]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b0d      	ldr	r3, [pc, #52]	@ (80019bc <HAL_TIM_MspPostInit+0x174>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8001992:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019a4:	2302      	movs	r3, #2
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <HAL_TIM_MspPostInit+0x17c>)
 80019b0:	f000 f9f8 	bl	8001da4 <HAL_GPIO_Init>
}
 80019b4:	bf00      	nop
 80019b6:	3730      	adds	r7, #48	@ 0x30
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40000400 	.word	0x40000400
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40000800 	.word	0x40000800

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <NMI_Handler+0x4>

080019dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <HardFault_Handler+0x4>

080019e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <MemManage_Handler+0x4>

080019ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2a:	f000 f891 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <SystemInit+0x20>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a3e:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <SystemInit+0x20>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a5c:	f7ff ffea 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a62:	490d      	ldr	r1, [pc, #52]	@ (8001a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a64:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a78:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a86:	f001 fd6b 	bl	8003560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8a:	f7ff fb97 	bl	80011bc <main>
  bx  lr    
 8001a8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001a9c:	080044d0 	.word	0x080044d0
  ldr r2, =_sbss
 8001aa0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001aa4:	20000308 	.word	0x20000308

08001aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8001aec <HAL_Init+0x40>)
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <HAL_Init+0x40>)
 8001ac2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <HAL_Init+0x40>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 f931 	bl	8001d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	200f      	movs	r0, #15
 8001adc:	f000 f808 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fe3e 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f93b 	bl	8001d8a <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b2c:	f000 f911 	bl	8001d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	@ (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000024 	.word	0x20000024
 8001b48:	2000002c 	.word	0x2000002c
 8001b4c:	20000028 	.word	0x20000028

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_IncTick+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_IncTick+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	@ (8001b74 <HAL_IncTick+0x24>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	2000002c 	.word	0x2000002c
 8001b74:	200001cc 	.word	0x200001cc

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	200001cc 	.word	0x200001cc

08001b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff ffee 	bl	8001b78 <HAL_GetTick>
 8001b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ba8:	d005      	beq.n	8001bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <HAL_Delay+0x44>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff ffde 	bl	8001b78 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d8f7      	bhi.n	8001bb8 <HAL_Delay+0x28>
  {
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000002c 	.word	0x2000002c

08001bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <__NVIC_SetPriorityGrouping+0x44>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c0a:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	60d3      	str	r3, [r2, #12]
}
 8001c10:	bf00      	nop
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c24:	4b04      	ldr	r3, [pc, #16]	@ (8001c38 <__NVIC_GetPriorityGrouping+0x18>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	f003 0307 	and.w	r3, r3, #7
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	db0a      	blt.n	8001c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	490c      	ldr	r1, [pc, #48]	@ (8001c88 <__NVIC_SetPriority+0x4c>)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	0112      	lsls	r2, r2, #4
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	440b      	add	r3, r1
 8001c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c64:	e00a      	b.n	8001c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4908      	ldr	r1, [pc, #32]	@ (8001c8c <__NVIC_SetPriority+0x50>)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	3b04      	subs	r3, #4
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	761a      	strb	r2, [r3, #24]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b089      	sub	sp, #36	@ 0x24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f1c3 0307 	rsb	r3, r3, #7
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	bf28      	it	cs
 8001cae:	2304      	movcs	r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2b06      	cmp	r3, #6
 8001cb8:	d902      	bls.n	8001cc0 <NVIC_EncodePriority+0x30>
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3b03      	subs	r3, #3
 8001cbe:	e000      	b.n	8001cc2 <NVIC_EncodePriority+0x32>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43d9      	mvns	r1, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce8:	4313      	orrs	r3, r2
         );
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	@ 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d08:	d301      	bcc.n	8001d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00f      	b.n	8001d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d38 <SysTick_Config+0x40>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d16:	210f      	movs	r1, #15
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d1c:	f7ff ff8e 	bl	8001c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d20:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <SysTick_Config+0x40>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d26:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <SysTick_Config+0x40>)
 8001d28:	2207      	movs	r2, #7
 8001d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	e000e010 	.word	0xe000e010

08001d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ff47 	bl	8001bd8 <__NVIC_SetPriorityGrouping>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d64:	f7ff ff5c 	bl	8001c20 <__NVIC_GetPriorityGrouping>
 8001d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	6978      	ldr	r0, [r7, #20]
 8001d70:	f7ff ff8e 	bl	8001c90 <NVIC_EncodePriority>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff5d 	bl	8001c3c <__NVIC_SetPriority>
}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffb0 	bl	8001cf8 <SysTick_Config>
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	@ 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e159      	b.n	8002074 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f040 8148 	bne.w	800206e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d005      	beq.n	8001df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d130      	bne.n	8001e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2203      	movs	r2, #3
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 0201 	and.w	r2, r3, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d017      	beq.n	8001e94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d123      	bne.n	8001ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	69b9      	ldr	r1, [r7, #24]
 8001ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80a2 	beq.w	800206e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b57      	ldr	r3, [pc, #348]	@ (800208c <HAL_GPIO_Init+0x2e8>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	4a56      	ldr	r2, [pc, #344]	@ (800208c <HAL_GPIO_Init+0x2e8>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3a:	4b54      	ldr	r3, [pc, #336]	@ (800208c <HAL_GPIO_Init+0x2e8>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f46:	4a52      	ldr	r2, [pc, #328]	@ (8002090 <HAL_GPIO_Init+0x2ec>)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a49      	ldr	r2, [pc, #292]	@ (8002094 <HAL_GPIO_Init+0x2f0>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d019      	beq.n	8001fa6 <HAL_GPIO_Init+0x202>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a48      	ldr	r2, [pc, #288]	@ (8002098 <HAL_GPIO_Init+0x2f4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <HAL_GPIO_Init+0x1fe>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a47      	ldr	r2, [pc, #284]	@ (800209c <HAL_GPIO_Init+0x2f8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00d      	beq.n	8001f9e <HAL_GPIO_Init+0x1fa>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a46      	ldr	r2, [pc, #280]	@ (80020a0 <HAL_GPIO_Init+0x2fc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <HAL_GPIO_Init+0x1f6>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a45      	ldr	r2, [pc, #276]	@ (80020a4 <HAL_GPIO_Init+0x300>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_GPIO_Init+0x1f2>
 8001f92:	2304      	movs	r3, #4
 8001f94:	e008      	b.n	8001fa8 <HAL_GPIO_Init+0x204>
 8001f96:	2307      	movs	r3, #7
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x204>
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e004      	b.n	8001fa8 <HAL_GPIO_Init+0x204>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e002      	b.n	8001fa8 <HAL_GPIO_Init+0x204>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_GPIO_Init+0x204>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	f002 0203 	and.w	r2, r2, #3
 8001fae:	0092      	lsls	r2, r2, #2
 8001fb0:	4093      	lsls	r3, r2
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb8:	4935      	ldr	r1, [pc, #212]	@ (8002090 <HAL_GPIO_Init+0x2ec>)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fc6:	4b38      	ldr	r3, [pc, #224]	@ (80020a8 <HAL_GPIO_Init+0x304>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fea:	4a2f      	ldr	r2, [pc, #188]	@ (80020a8 <HAL_GPIO_Init+0x304>)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <HAL_GPIO_Init+0x304>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002014:	4a24      	ldr	r2, [pc, #144]	@ (80020a8 <HAL_GPIO_Init+0x304>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800201a:	4b23      	ldr	r3, [pc, #140]	@ (80020a8 <HAL_GPIO_Init+0x304>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800203e:	4a1a      	ldr	r2, [pc, #104]	@ (80020a8 <HAL_GPIO_Init+0x304>)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002044:	4b18      	ldr	r3, [pc, #96]	@ (80020a8 <HAL_GPIO_Init+0x304>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002068:	4a0f      	ldr	r2, [pc, #60]	@ (80020a8 <HAL_GPIO_Init+0x304>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3301      	adds	r3, #1
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b0f      	cmp	r3, #15
 8002078:	f67f aea2 	bls.w	8001dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3724      	adds	r7, #36	@ 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	40013800 	.word	0x40013800
 8002094:	40020000 	.word	0x40020000
 8002098:	40020400 	.word	0x40020400
 800209c:	40020800 	.word	0x40020800
 80020a0:	40020c00 	.word	0x40020c00
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40013c00 	.word	0x40013c00

080020ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e267      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d075      	beq.n	80021b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ca:	4b88      	ldr	r3, [pc, #544]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d00c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020d6:	4b85      	ldr	r3, [pc, #532]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d112      	bne.n	8002108 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4b82      	ldr	r3, [pc, #520]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020ee:	d10b      	bne.n	8002108 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	4b7e      	ldr	r3, [pc, #504]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d05b      	beq.n	80021b4 <HAL_RCC_OscConfig+0x108>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d157      	bne.n	80021b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e242      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002110:	d106      	bne.n	8002120 <HAL_RCC_OscConfig+0x74>
 8002112:	4b76      	ldr	r3, [pc, #472]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a75      	ldr	r2, [pc, #468]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e01d      	b.n	800215c <HAL_RCC_OscConfig+0xb0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x98>
 800212a:	4b70      	ldr	r3, [pc, #448]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6f      	ldr	r2, [pc, #444]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b6d      	ldr	r3, [pc, #436]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a6c      	ldr	r2, [pc, #432]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0xb0>
 8002144:	4b69      	ldr	r3, [pc, #420]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a68      	ldr	r2, [pc, #416]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 800214a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b66      	ldr	r3, [pc, #408]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a65      	ldr	r2, [pc, #404]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 8002156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800215a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fd08 	bl	8001b78 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff fd04 	bl	8001b78 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	@ 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e207      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b5b      	ldr	r3, [pc, #364]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0xc0>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7ff fcf4 	bl	8001b78 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff fcf0 	bl	8001b78 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	@ 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e1f3      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	4b51      	ldr	r3, [pc, #324]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0xe8>
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d063      	beq.n	800228a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021c2:	4b4a      	ldr	r3, [pc, #296]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ce:	4b47      	ldr	r3, [pc, #284]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d11c      	bne.n	8002214 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021da:	4b44      	ldr	r3, [pc, #272]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d116      	bne.n	8002214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	4b41      	ldr	r3, [pc, #260]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_RCC_OscConfig+0x152>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e1c7      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021fe:	4b3b      	ldr	r3, [pc, #236]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4937      	ldr	r1, [pc, #220]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	e03a      	b.n	800228a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221c:	4b34      	ldr	r3, [pc, #208]	@ (80022f0 <HAL_RCC_OscConfig+0x244>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7ff fca9 	bl	8001b78 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222a:	f7ff fca5 	bl	8001b78 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e1a8      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223c:	4b2b      	ldr	r3, [pc, #172]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b28      	ldr	r3, [pc, #160]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4925      	ldr	r1, [pc, #148]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	e015      	b.n	800228a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225e:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <HAL_RCC_OscConfig+0x244>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7ff fc88 	bl	8001b78 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226c:	f7ff fc84 	bl	8001b78 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e187      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227e:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d036      	beq.n	8002304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d016      	beq.n	80022cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <HAL_RCC_OscConfig+0x248>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7ff fc68 	bl	8001b78 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ac:	f7ff fc64 	bl	8001b78 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e167      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022be:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <HAL_RCC_OscConfig+0x240>)
 80022c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x200>
 80022ca:	e01b      	b.n	8002304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <HAL_RCC_OscConfig+0x248>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7ff fc51 	bl	8001b78 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	e00e      	b.n	80022f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022da:	f7ff fc4d 	bl	8001b78 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d907      	bls.n	80022f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e150      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
 80022ec:	40023800 	.word	0x40023800
 80022f0:	42470000 	.word	0x42470000
 80022f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	4b88      	ldr	r3, [pc, #544]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 80022fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ea      	bne.n	80022da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8097 	beq.w	8002440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002316:	4b81      	ldr	r3, [pc, #516]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10f      	bne.n	8002342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	4b7d      	ldr	r3, [pc, #500]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	4a7c      	ldr	r2, [pc, #496]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	@ 0x40
 8002332:	4b7a      	ldr	r3, [pc, #488]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800233e:	2301      	movs	r3, #1
 8002340:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002342:	4b77      	ldr	r3, [pc, #476]	@ (8002520 <HAL_RCC_OscConfig+0x474>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d118      	bne.n	8002380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234e:	4b74      	ldr	r3, [pc, #464]	@ (8002520 <HAL_RCC_OscConfig+0x474>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a73      	ldr	r2, [pc, #460]	@ (8002520 <HAL_RCC_OscConfig+0x474>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235a:	f7ff fc0d 	bl	8001b78 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002362:	f7ff fc09 	bl	8001b78 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e10c      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	4b6a      	ldr	r3, [pc, #424]	@ (8002520 <HAL_RCC_OscConfig+0x474>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d106      	bne.n	8002396 <HAL_RCC_OscConfig+0x2ea>
 8002388:	4b64      	ldr	r3, [pc, #400]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238c:	4a63      	ldr	r2, [pc, #396]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6713      	str	r3, [r2, #112]	@ 0x70
 8002394:	e01c      	b.n	80023d0 <HAL_RCC_OscConfig+0x324>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	2b05      	cmp	r3, #5
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x30c>
 800239e:	4b5f      	ldr	r3, [pc, #380]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a2:	4a5e      	ldr	r2, [pc, #376]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023aa:	4b5c      	ldr	r3, [pc, #368]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ae:	4a5b      	ldr	r2, [pc, #364]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0x324>
 80023b8:	4b58      	ldr	r3, [pc, #352]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023bc:	4a57      	ldr	r2, [pc, #348]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c4:	4b55      	ldr	r3, [pc, #340]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c8:	4a54      	ldr	r2, [pc, #336]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 80023ca:	f023 0304 	bic.w	r3, r3, #4
 80023ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d015      	beq.n	8002404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7ff fbce 	bl	8001b78 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7ff fbca 	bl	8001b78 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e0cb      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	4b49      	ldr	r3, [pc, #292]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0ee      	beq.n	80023e0 <HAL_RCC_OscConfig+0x334>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002404:	f7ff fbb8 	bl	8001b78 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7ff fbb4 	bl	8001b78 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e0b5      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002422:	4b3e      	ldr	r3, [pc, #248]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1ee      	bne.n	800240c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800242e:	7dfb      	ldrb	r3, [r7, #23]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002434:	4b39      	ldr	r3, [pc, #228]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	4a38      	ldr	r2, [pc, #224]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 800243a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800243e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a1 	beq.w	800258c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800244a:	4b34      	ldr	r3, [pc, #208]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b08      	cmp	r3, #8
 8002454:	d05c      	beq.n	8002510 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d141      	bne.n	80024e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b31      	ldr	r3, [pc, #196]	@ (8002524 <HAL_RCC_OscConfig+0x478>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7ff fb88 	bl	8001b78 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800246c:	f7ff fb84 	bl	8001b78 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e087      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b27      	ldr	r3, [pc, #156]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	019b      	lsls	r3, r3, #6
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	3b01      	subs	r3, #1
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	061b      	lsls	r3, r3, #24
 80024ae:	491b      	ldr	r1, [pc, #108]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HAL_RCC_OscConfig+0x478>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ba:	f7ff fb5d 	bl	8001b78 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c2:	f7ff fb59 	bl	8001b78 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e05c      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x416>
 80024e0:	e054      	b.n	800258c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <HAL_RCC_OscConfig+0x478>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e8:	f7ff fb46 	bl	8001b78 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f0:	f7ff fb42 	bl	8001b78 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e045      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	4b06      	ldr	r3, [pc, #24]	@ (800251c <HAL_RCC_OscConfig+0x470>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x444>
 800250e:	e03d      	b.n	800258c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d107      	bne.n	8002528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e038      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
 800251c:	40023800 	.word	0x40023800
 8002520:	40007000 	.word	0x40007000
 8002524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002528:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <HAL_RCC_OscConfig+0x4ec>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d028      	beq.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d121      	bne.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d11a      	bne.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002558:	4013      	ands	r3, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800255e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002560:	4293      	cmp	r3, r2
 8002562:	d111      	bne.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	3b01      	subs	r3, #1
 8002572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d107      	bne.n	8002588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800

0800259c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0cc      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b0:	4b68      	ldr	r3, [pc, #416]	@ (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d90c      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b65      	ldr	r3, [pc, #404]	@ (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b63      	ldr	r3, [pc, #396]	@ (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b8      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f0:	4b59      	ldr	r3, [pc, #356]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4a58      	ldr	r2, [pc, #352]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4b53      	ldr	r3, [pc, #332]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a52      	ldr	r2, [pc, #328]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b50      	ldr	r3, [pc, #320]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	494d      	ldr	r1, [pc, #308]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d044      	beq.n	80026bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b47      	ldr	r3, [pc, #284]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d119      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d003      	beq.n	800265a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	2b03      	cmp	r3, #3
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	4b3f      	ldr	r3, [pc, #252]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e06f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	4b3b      	ldr	r3, [pc, #236]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e067      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267a:	4b37      	ldr	r3, [pc, #220]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f023 0203 	bic.w	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4934      	ldr	r1, [pc, #208]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	4313      	orrs	r3, r2
 800268a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800268c:	f7ff fa74 	bl	8001b78 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	e00a      	b.n	80026aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	f7ff fa70 	bl	8001b78 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e04f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 020c 	and.w	r2, r3, #12
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1eb      	bne.n	8002694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026bc:	4b25      	ldr	r3, [pc, #148]	@ (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d20c      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b22      	ldr	r3, [pc, #136]	@ (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b20      	ldr	r3, [pc, #128]	@ (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e032      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b19      	ldr	r3, [pc, #100]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4916      	ldr	r1, [pc, #88]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800270e:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	490e      	ldr	r1, [pc, #56]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002722:	f000 f821 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490a      	ldr	r1, [pc, #40]	@ (800275c <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <HAL_RCC_ClockConfig+0x1c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f9d4 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00
 8002758:	40023800 	.word	0x40023800
 800275c:	08004480 	.word	0x08004480
 8002760:	20000024 	.word	0x20000024
 8002764:	20000028 	.word	0x20000028

08002768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800276c:	b090      	sub	sp, #64	@ 0x40
 800276e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
 8002774:	2300      	movs	r3, #0
 8002776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002778:	2300      	movs	r3, #0
 800277a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002780:	4b59      	ldr	r3, [pc, #356]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b08      	cmp	r3, #8
 800278a:	d00d      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x40>
 800278c:	2b08      	cmp	r3, #8
 800278e:	f200 80a1 	bhi.w	80028d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x34>
 8002796:	2b04      	cmp	r3, #4
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800279a:	e09b      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b53      	ldr	r3, [pc, #332]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x184>)
 800279e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80027a0:	e09b      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027a2:	4b53      	ldr	r3, [pc, #332]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80027a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027a6:	e098      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a8:	4b4f      	ldr	r3, [pc, #316]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b2:	4b4d      	ldr	r3, [pc, #308]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d028      	beq.n	8002810 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027be:	4b4a      	ldr	r3, [pc, #296]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	099b      	lsrs	r3, r3, #6
 80027c4:	2200      	movs	r2, #0
 80027c6:	623b      	str	r3, [r7, #32]
 80027c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027d0:	2100      	movs	r1, #0
 80027d2:	4b47      	ldr	r3, [pc, #284]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80027d4:	fb03 f201 	mul.w	r2, r3, r1
 80027d8:	2300      	movs	r3, #0
 80027da:	fb00 f303 	mul.w	r3, r0, r3
 80027de:	4413      	add	r3, r2
 80027e0:	4a43      	ldr	r2, [pc, #268]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80027e2:	fba0 1202 	umull	r1, r2, r0, r2
 80027e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027e8:	460a      	mov	r2, r1
 80027ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80027ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027ee:	4413      	add	r3, r2
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f4:	2200      	movs	r2, #0
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	61fa      	str	r2, [r7, #28]
 80027fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002802:	f7fe f975 	bl	8000af0 <__aeabi_uldivmod>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4613      	mov	r3, r2
 800280c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800280e:	e053      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002810:	4b35      	ldr	r3, [pc, #212]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	099b      	lsrs	r3, r3, #6
 8002816:	2200      	movs	r2, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	617a      	str	r2, [r7, #20]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002822:	f04f 0b00 	mov.w	fp, #0
 8002826:	4652      	mov	r2, sl
 8002828:	465b      	mov	r3, fp
 800282a:	f04f 0000 	mov.w	r0, #0
 800282e:	f04f 0100 	mov.w	r1, #0
 8002832:	0159      	lsls	r1, r3, #5
 8002834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002838:	0150      	lsls	r0, r2, #5
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	ebb2 080a 	subs.w	r8, r2, sl
 8002842:	eb63 090b 	sbc.w	r9, r3, fp
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002852:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002856:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800285a:	ebb2 0408 	subs.w	r4, r2, r8
 800285e:	eb63 0509 	sbc.w	r5, r3, r9
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	00eb      	lsls	r3, r5, #3
 800286c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002870:	00e2      	lsls	r2, r4, #3
 8002872:	4614      	mov	r4, r2
 8002874:	461d      	mov	r5, r3
 8002876:	eb14 030a 	adds.w	r3, r4, sl
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	eb45 030b 	adc.w	r3, r5, fp
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800288e:	4629      	mov	r1, r5
 8002890:	028b      	lsls	r3, r1, #10
 8002892:	4621      	mov	r1, r4
 8002894:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002898:	4621      	mov	r1, r4
 800289a:	028a      	lsls	r2, r1, #10
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a2:	2200      	movs	r2, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	60fa      	str	r2, [r7, #12]
 80028a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028ac:	f7fe f920 	bl	8000af0 <__aeabi_uldivmod>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4613      	mov	r3, r2
 80028b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028b8:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	3301      	adds	r3, #1
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80028c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028d2:	e002      	b.n	80028da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028d4:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x184>)
 80028d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3740      	adds	r7, #64	@ 0x40
 80028e0:	46bd      	mov	sp, r7
 80028e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	00f42400 	.word	0x00f42400
 80028f0:	017d7840 	.word	0x017d7840

080028f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e041      	b.n	800298a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe ff48 	bl	80017b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f000 fac0 	bl	8002eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e041      	b.n	8002a28 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d106      	bne.n	80029be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f839 	bl	8002a30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3304      	adds	r3, #4
 80029ce:	4619      	mov	r1, r3
 80029d0:	4610      	mov	r0, r2
 80029d2:	f000 fa71 	bl	8002eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <HAL_TIM_PWM_Start+0x24>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	bf14      	ite	ne
 8002a60:	2301      	movne	r3, #1
 8002a62:	2300      	moveq	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e022      	b.n	8002aae <HAL_TIM_PWM_Start+0x6a>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d109      	bne.n	8002a82 <HAL_TIM_PWM_Start+0x3e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	bf14      	ite	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	2300      	moveq	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	e015      	b.n	8002aae <HAL_TIM_PWM_Start+0x6a>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d109      	bne.n	8002a9c <HAL_TIM_PWM_Start+0x58>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	bf14      	ite	ne
 8002a94:	2301      	movne	r3, #1
 8002a96:	2300      	moveq	r3, #0
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	e008      	b.n	8002aae <HAL_TIM_PWM_Start+0x6a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	bf14      	ite	ne
 8002aa8:	2301      	movne	r3, #1
 8002aaa:	2300      	moveq	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e068      	b.n	8002b88 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d104      	bne.n	8002ac6 <HAL_TIM_PWM_Start+0x82>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ac4:	e013      	b.n	8002aee <HAL_TIM_PWM_Start+0xaa>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d104      	bne.n	8002ad6 <HAL_TIM_PWM_Start+0x92>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ad4:	e00b      	b.n	8002aee <HAL_TIM_PWM_Start+0xaa>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d104      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0xa2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ae4:	e003      	b.n	8002aee <HAL_TIM_PWM_Start+0xaa>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2201      	movs	r2, #1
 8002af4:	6839      	ldr	r1, [r7, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fc90 	bl	800341c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a23      	ldr	r2, [pc, #140]	@ (8002b90 <HAL_TIM_PWM_Start+0x14c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d107      	bne.n	8002b16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002b90 <HAL_TIM_PWM_Start+0x14c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d018      	beq.n	8002b52 <HAL_TIM_PWM_Start+0x10e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b28:	d013      	beq.n	8002b52 <HAL_TIM_PWM_Start+0x10e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a19      	ldr	r2, [pc, #100]	@ (8002b94 <HAL_TIM_PWM_Start+0x150>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00e      	beq.n	8002b52 <HAL_TIM_PWM_Start+0x10e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a17      	ldr	r2, [pc, #92]	@ (8002b98 <HAL_TIM_PWM_Start+0x154>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d009      	beq.n	8002b52 <HAL_TIM_PWM_Start+0x10e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a16      	ldr	r2, [pc, #88]	@ (8002b9c <HAL_TIM_PWM_Start+0x158>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d004      	beq.n	8002b52 <HAL_TIM_PWM_Start+0x10e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ba0 <HAL_TIM_PWM_Start+0x15c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d111      	bne.n	8002b76 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b06      	cmp	r3, #6
 8002b62:	d010      	beq.n	8002b86 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b74:	e007      	b.n	8002b86 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0201 	orr.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40010000 	.word	0x40010000
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40000800 	.word	0x40000800
 8002b9c:	40000c00 	.word	0x40000c00
 8002ba0:	40014000 	.word	0x40014000

08002ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e0ae      	b.n	8002d20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b0c      	cmp	r3, #12
 8002bce:	f200 809f 	bhi.w	8002d10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002c0d 	.word	0x08002c0d
 8002bdc:	08002d11 	.word	0x08002d11
 8002be0:	08002d11 	.word	0x08002d11
 8002be4:	08002d11 	.word	0x08002d11
 8002be8:	08002c4d 	.word	0x08002c4d
 8002bec:	08002d11 	.word	0x08002d11
 8002bf0:	08002d11 	.word	0x08002d11
 8002bf4:	08002d11 	.word	0x08002d11
 8002bf8:	08002c8f 	.word	0x08002c8f
 8002bfc:	08002d11 	.word	0x08002d11
 8002c00:	08002d11 	.word	0x08002d11
 8002c04:	08002d11 	.word	0x08002d11
 8002c08:	08002ccf 	.word	0x08002ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f9dc 	bl	8002fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0208 	orr.w	r2, r2, #8
 8002c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699a      	ldr	r2, [r3, #24]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0204 	bic.w	r2, r2, #4
 8002c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6999      	ldr	r1, [r3, #24]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	619a      	str	r2, [r3, #24]
      break;
 8002c4a:	e064      	b.n	8002d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fa22 	bl	800309c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6999      	ldr	r1, [r3, #24]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	021a      	lsls	r2, r3, #8
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	619a      	str	r2, [r3, #24]
      break;
 8002c8c:	e043      	b.n	8002d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 fa6d 	bl	8003174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0208 	orr.w	r2, r2, #8
 8002ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69da      	ldr	r2, [r3, #28]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0204 	bic.w	r2, r2, #4
 8002cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69d9      	ldr	r1, [r3, #28]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	61da      	str	r2, [r3, #28]
      break;
 8002ccc:	e023      	b.n	8002d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68b9      	ldr	r1, [r7, #8]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 fab7 	bl	8003248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69da      	ldr	r2, [r3, #28]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69d9      	ldr	r1, [r3, #28]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	021a      	lsls	r2, r3, #8
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	61da      	str	r2, [r3, #28]
      break;
 8002d0e:	e002      	b.n	8002d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	75fb      	strb	r3, [r7, #23]
      break;
 8002d14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_TIM_ConfigClockSource+0x1c>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e0b4      	b.n	8002eae <HAL_TIM_ConfigClockSource+0x186>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d7c:	d03e      	beq.n	8002dfc <HAL_TIM_ConfigClockSource+0xd4>
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d82:	f200 8087 	bhi.w	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d8a:	f000 8086 	beq.w	8002e9a <HAL_TIM_ConfigClockSource+0x172>
 8002d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d92:	d87f      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b70      	cmp	r3, #112	@ 0x70
 8002d96:	d01a      	beq.n	8002dce <HAL_TIM_ConfigClockSource+0xa6>
 8002d98:	2b70      	cmp	r3, #112	@ 0x70
 8002d9a:	d87b      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b60      	cmp	r3, #96	@ 0x60
 8002d9e:	d050      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x11a>
 8002da0:	2b60      	cmp	r3, #96	@ 0x60
 8002da2:	d877      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002da4:	2b50      	cmp	r3, #80	@ 0x50
 8002da6:	d03c      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0xfa>
 8002da8:	2b50      	cmp	r3, #80	@ 0x50
 8002daa:	d873      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b40      	cmp	r3, #64	@ 0x40
 8002dae:	d058      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0x13a>
 8002db0:	2b40      	cmp	r3, #64	@ 0x40
 8002db2:	d86f      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002db4:	2b30      	cmp	r3, #48	@ 0x30
 8002db6:	d064      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x15a>
 8002db8:	2b30      	cmp	r3, #48	@ 0x30
 8002dba:	d86b      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d060      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x15a>
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d867      	bhi.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d05c      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x15a>
 8002dc8:	2b10      	cmp	r3, #16
 8002dca:	d05a      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x15a>
 8002dcc:	e062      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dde:	f000 fafd 	bl	80033dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002df0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	609a      	str	r2, [r3, #8]
      break;
 8002dfa:	e04f      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e0c:	f000 fae6 	bl	80033dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e1e:	609a      	str	r2, [r3, #8]
      break;
 8002e20:	e03c      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f000 fa5a 	bl	80032e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2150      	movs	r1, #80	@ 0x50
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fab3 	bl	80033a6 <TIM_ITRx_SetConfig>
      break;
 8002e40:	e02c      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f000 fa79 	bl	8003346 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2160      	movs	r1, #96	@ 0x60
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 faa3 	bl	80033a6 <TIM_ITRx_SetConfig>
      break;
 8002e60:	e01c      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f000 fa3a 	bl	80032e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2140      	movs	r1, #64	@ 0x40
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fa93 	bl	80033a6 <TIM_ITRx_SetConfig>
      break;
 8002e80:	e00c      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	f000 fa8a 	bl	80033a6 <TIM_ITRx_SetConfig>
      break;
 8002e92:	e003      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
      break;
 8002e98:	e000      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a3a      	ldr	r2, [pc, #232]	@ (8002fb4 <TIM_Base_SetConfig+0xfc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00f      	beq.n	8002ef0 <TIM_Base_SetConfig+0x38>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed6:	d00b      	beq.n	8002ef0 <TIM_Base_SetConfig+0x38>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a37      	ldr	r2, [pc, #220]	@ (8002fb8 <TIM_Base_SetConfig+0x100>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d007      	beq.n	8002ef0 <TIM_Base_SetConfig+0x38>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a36      	ldr	r2, [pc, #216]	@ (8002fbc <TIM_Base_SetConfig+0x104>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d003      	beq.n	8002ef0 <TIM_Base_SetConfig+0x38>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a35      	ldr	r2, [pc, #212]	@ (8002fc0 <TIM_Base_SetConfig+0x108>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d108      	bne.n	8002f02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb4 <TIM_Base_SetConfig+0xfc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01b      	beq.n	8002f42 <TIM_Base_SetConfig+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f10:	d017      	beq.n	8002f42 <TIM_Base_SetConfig+0x8a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a28      	ldr	r2, [pc, #160]	@ (8002fb8 <TIM_Base_SetConfig+0x100>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <TIM_Base_SetConfig+0x8a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a27      	ldr	r2, [pc, #156]	@ (8002fbc <TIM_Base_SetConfig+0x104>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00f      	beq.n	8002f42 <TIM_Base_SetConfig+0x8a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a26      	ldr	r2, [pc, #152]	@ (8002fc0 <TIM_Base_SetConfig+0x108>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00b      	beq.n	8002f42 <TIM_Base_SetConfig+0x8a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a25      	ldr	r2, [pc, #148]	@ (8002fc4 <TIM_Base_SetConfig+0x10c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d007      	beq.n	8002f42 <TIM_Base_SetConfig+0x8a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a24      	ldr	r2, [pc, #144]	@ (8002fc8 <TIM_Base_SetConfig+0x110>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d003      	beq.n	8002f42 <TIM_Base_SetConfig+0x8a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a23      	ldr	r2, [pc, #140]	@ (8002fcc <TIM_Base_SetConfig+0x114>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d108      	bne.n	8002f54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002fb4 <TIM_Base_SetConfig+0xfc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d105      	bne.n	8002fa6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f023 0201 	bic.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	611a      	str	r2, [r3, #16]
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40010000 	.word	0x40010000
 8002fb8:	40000400 	.word	0x40000400
 8002fbc:	40000800 	.word	0x40000800
 8002fc0:	40000c00 	.word	0x40000c00
 8002fc4:	40014000 	.word	0x40014000
 8002fc8:	40014400 	.word	0x40014400
 8002fcc:	40014800 	.word	0x40014800

08002fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f023 0201 	bic.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f023 0302 	bic.w	r3, r3, #2
 8003018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a1c      	ldr	r2, [pc, #112]	@ (8003098 <TIM_OC1_SetConfig+0xc8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d10c      	bne.n	8003046 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f023 0308 	bic.w	r3, r3, #8
 8003032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f023 0304 	bic.w	r3, r3, #4
 8003044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a13      	ldr	r2, [pc, #76]	@ (8003098 <TIM_OC1_SetConfig+0xc8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d111      	bne.n	8003072 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800305c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	621a      	str	r2, [r3, #32]
}
 800308c:	bf00      	nop
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40010000 	.word	0x40010000

0800309c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f023 0210 	bic.w	r2, r3, #16
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f023 0320 	bic.w	r3, r3, #32
 80030e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003170 <TIM_OC2_SetConfig+0xd4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d10d      	bne.n	8003118 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a15      	ldr	r2, [pc, #84]	@ (8003170 <TIM_OC2_SetConfig+0xd4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d113      	bne.n	8003148 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800312e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40010000 	.word	0x40010000

08003174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0303 	bic.w	r3, r3, #3
 80031aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003244 <TIM_OC3_SetConfig+0xd0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d10d      	bne.n	80031ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a14      	ldr	r2, [pc, #80]	@ (8003244 <TIM_OC3_SetConfig+0xd0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d113      	bne.n	800321e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	621a      	str	r2, [r3, #32]
}
 8003238:	bf00      	nop
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40010000 	.word	0x40010000

08003248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800327e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	031b      	lsls	r3, r3, #12
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a10      	ldr	r2, [pc, #64]	@ (80032e4 <TIM_OC4_SetConfig+0x9c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d109      	bne.n	80032bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	019b      	lsls	r3, r3, #6
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	621a      	str	r2, [r3, #32]
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40010000 	.word	0x40010000

080032e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f023 0201 	bic.w	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f023 030a 	bic.w	r3, r3, #10
 8003324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	621a      	str	r2, [r3, #32]
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003346:	b480      	push	{r7}
 8003348:	b087      	sub	sp, #28
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f023 0210 	bic.w	r2, r3, #16
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	031b      	lsls	r3, r3, #12
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003382:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f043 0307 	orr.w	r3, r3, #7
 80033c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	609a      	str	r2, [r3, #8]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	021a      	lsls	r2, r3, #8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	431a      	orrs	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4313      	orrs	r3, r2
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	609a      	str	r2, [r3, #8]
}
 8003410:	bf00      	nop
 8003412:	371c      	adds	r7, #28
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	2201      	movs	r2, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a1a      	ldr	r2, [r3, #32]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	43db      	mvns	r3, r3
 800343e:	401a      	ands	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1a      	ldr	r2, [r3, #32]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	431a      	orrs	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800347c:	2302      	movs	r3, #2
 800347e:	e050      	b.n	8003522 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1c      	ldr	r2, [pc, #112]	@ (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d018      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034cc:	d013      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a18      	ldr	r2, [pc, #96]	@ (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00e      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a16      	ldr	r2, [pc, #88]	@ (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d009      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a15      	ldr	r2, [pc, #84]	@ (800353c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d004      	beq.n	80034f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a13      	ldr	r2, [pc, #76]	@ (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d10c      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	4313      	orrs	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40010000 	.word	0x40010000
 8003534:	40000400 	.word	0x40000400
 8003538:	40000800 	.word	0x40000800
 800353c:	40000c00 	.word	0x40000c00
 8003540:	40014000 	.word	0x40014000

08003544 <memset>:
 8003544:	4402      	add	r2, r0
 8003546:	4603      	mov	r3, r0
 8003548:	4293      	cmp	r3, r2
 800354a:	d100      	bne.n	800354e <memset+0xa>
 800354c:	4770      	bx	lr
 800354e:	f803 1b01 	strb.w	r1, [r3], #1
 8003552:	e7f9      	b.n	8003548 <memset+0x4>

08003554 <__errno>:
 8003554:	4b01      	ldr	r3, [pc, #4]	@ (800355c <__errno+0x8>)
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	20000030 	.word	0x20000030

08003560 <__libc_init_array>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	4d0d      	ldr	r5, [pc, #52]	@ (8003598 <__libc_init_array+0x38>)
 8003564:	4c0d      	ldr	r4, [pc, #52]	@ (800359c <__libc_init_array+0x3c>)
 8003566:	1b64      	subs	r4, r4, r5
 8003568:	10a4      	asrs	r4, r4, #2
 800356a:	2600      	movs	r6, #0
 800356c:	42a6      	cmp	r6, r4
 800356e:	d109      	bne.n	8003584 <__libc_init_array+0x24>
 8003570:	4d0b      	ldr	r5, [pc, #44]	@ (80035a0 <__libc_init_array+0x40>)
 8003572:	4c0c      	ldr	r4, [pc, #48]	@ (80035a4 <__libc_init_array+0x44>)
 8003574:	f000 ff76 	bl	8004464 <_init>
 8003578:	1b64      	subs	r4, r4, r5
 800357a:	10a4      	asrs	r4, r4, #2
 800357c:	2600      	movs	r6, #0
 800357e:	42a6      	cmp	r6, r4
 8003580:	d105      	bne.n	800358e <__libc_init_array+0x2e>
 8003582:	bd70      	pop	{r4, r5, r6, pc}
 8003584:	f855 3b04 	ldr.w	r3, [r5], #4
 8003588:	4798      	blx	r3
 800358a:	3601      	adds	r6, #1
 800358c:	e7ee      	b.n	800356c <__libc_init_array+0xc>
 800358e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003592:	4798      	blx	r3
 8003594:	3601      	adds	r6, #1
 8003596:	e7f2      	b.n	800357e <__libc_init_array+0x1e>
 8003598:	080044c8 	.word	0x080044c8
 800359c:	080044c8 	.word	0x080044c8
 80035a0:	080044c8 	.word	0x080044c8
 80035a4:	080044cc 	.word	0x080044cc

080035a8 <pow>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	ed2d 8b02 	vpush	{d8}
 80035ae:	eeb0 8a40 	vmov.f32	s16, s0
 80035b2:	eef0 8a60 	vmov.f32	s17, s1
 80035b6:	ec55 4b11 	vmov	r4, r5, d1
 80035ba:	f000 f871 	bl	80036a0 <__ieee754_pow>
 80035be:	4622      	mov	r2, r4
 80035c0:	462b      	mov	r3, r5
 80035c2:	4620      	mov	r0, r4
 80035c4:	4629      	mov	r1, r5
 80035c6:	ec57 6b10 	vmov	r6, r7, d0
 80035ca:	f7fd fa5b 	bl	8000a84 <__aeabi_dcmpun>
 80035ce:	2800      	cmp	r0, #0
 80035d0:	d13b      	bne.n	800364a <pow+0xa2>
 80035d2:	ec51 0b18 	vmov	r0, r1, d8
 80035d6:	2200      	movs	r2, #0
 80035d8:	2300      	movs	r3, #0
 80035da:	f7fd fa21 	bl	8000a20 <__aeabi_dcmpeq>
 80035de:	b1b8      	cbz	r0, 8003610 <pow+0x68>
 80035e0:	2200      	movs	r2, #0
 80035e2:	2300      	movs	r3, #0
 80035e4:	4620      	mov	r0, r4
 80035e6:	4629      	mov	r1, r5
 80035e8:	f7fd fa1a 	bl	8000a20 <__aeabi_dcmpeq>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d146      	bne.n	800367e <pow+0xd6>
 80035f0:	ec45 4b10 	vmov	d0, r4, r5
 80035f4:	f000 f848 	bl	8003688 <finite>
 80035f8:	b338      	cbz	r0, 800364a <pow+0xa2>
 80035fa:	2200      	movs	r2, #0
 80035fc:	2300      	movs	r3, #0
 80035fe:	4620      	mov	r0, r4
 8003600:	4629      	mov	r1, r5
 8003602:	f7fd fa17 	bl	8000a34 <__aeabi_dcmplt>
 8003606:	b300      	cbz	r0, 800364a <pow+0xa2>
 8003608:	f7ff ffa4 	bl	8003554 <__errno>
 800360c:	2322      	movs	r3, #34	@ 0x22
 800360e:	e01b      	b.n	8003648 <pow+0xa0>
 8003610:	ec47 6b10 	vmov	d0, r6, r7
 8003614:	f000 f838 	bl	8003688 <finite>
 8003618:	b9e0      	cbnz	r0, 8003654 <pow+0xac>
 800361a:	eeb0 0a48 	vmov.f32	s0, s16
 800361e:	eef0 0a68 	vmov.f32	s1, s17
 8003622:	f000 f831 	bl	8003688 <finite>
 8003626:	b1a8      	cbz	r0, 8003654 <pow+0xac>
 8003628:	ec45 4b10 	vmov	d0, r4, r5
 800362c:	f000 f82c 	bl	8003688 <finite>
 8003630:	b180      	cbz	r0, 8003654 <pow+0xac>
 8003632:	4632      	mov	r2, r6
 8003634:	463b      	mov	r3, r7
 8003636:	4630      	mov	r0, r6
 8003638:	4639      	mov	r1, r7
 800363a:	f7fd fa23 	bl	8000a84 <__aeabi_dcmpun>
 800363e:	2800      	cmp	r0, #0
 8003640:	d0e2      	beq.n	8003608 <pow+0x60>
 8003642:	f7ff ff87 	bl	8003554 <__errno>
 8003646:	2321      	movs	r3, #33	@ 0x21
 8003648:	6003      	str	r3, [r0, #0]
 800364a:	ecbd 8b02 	vpop	{d8}
 800364e:	ec47 6b10 	vmov	d0, r6, r7
 8003652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003654:	2200      	movs	r2, #0
 8003656:	2300      	movs	r3, #0
 8003658:	4630      	mov	r0, r6
 800365a:	4639      	mov	r1, r7
 800365c:	f7fd f9e0 	bl	8000a20 <__aeabi_dcmpeq>
 8003660:	2800      	cmp	r0, #0
 8003662:	d0f2      	beq.n	800364a <pow+0xa2>
 8003664:	eeb0 0a48 	vmov.f32	s0, s16
 8003668:	eef0 0a68 	vmov.f32	s1, s17
 800366c:	f000 f80c 	bl	8003688 <finite>
 8003670:	2800      	cmp	r0, #0
 8003672:	d0ea      	beq.n	800364a <pow+0xa2>
 8003674:	ec45 4b10 	vmov	d0, r4, r5
 8003678:	f000 f806 	bl	8003688 <finite>
 800367c:	e7c3      	b.n	8003606 <pow+0x5e>
 800367e:	4f01      	ldr	r7, [pc, #4]	@ (8003684 <pow+0xdc>)
 8003680:	2600      	movs	r6, #0
 8003682:	e7e2      	b.n	800364a <pow+0xa2>
 8003684:	3ff00000 	.word	0x3ff00000

08003688 <finite>:
 8003688:	b082      	sub	sp, #8
 800368a:	ed8d 0b00 	vstr	d0, [sp]
 800368e:	9801      	ldr	r0, [sp, #4]
 8003690:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003694:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003698:	0fc0      	lsrs	r0, r0, #31
 800369a:	b002      	add	sp, #8
 800369c:	4770      	bx	lr
	...

080036a0 <__ieee754_pow>:
 80036a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a4:	b091      	sub	sp, #68	@ 0x44
 80036a6:	ed8d 1b00 	vstr	d1, [sp]
 80036aa:	e9dd 1900 	ldrd	r1, r9, [sp]
 80036ae:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80036b2:	ea5a 0001 	orrs.w	r0, sl, r1
 80036b6:	ec57 6b10 	vmov	r6, r7, d0
 80036ba:	d113      	bne.n	80036e4 <__ieee754_pow+0x44>
 80036bc:	19b3      	adds	r3, r6, r6
 80036be:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80036c2:	4152      	adcs	r2, r2
 80036c4:	4298      	cmp	r0, r3
 80036c6:	4b98      	ldr	r3, [pc, #608]	@ (8003928 <__ieee754_pow+0x288>)
 80036c8:	4193      	sbcs	r3, r2
 80036ca:	f080 84ea 	bcs.w	80040a2 <__ieee754_pow+0xa02>
 80036ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80036d2:	4630      	mov	r0, r6
 80036d4:	4639      	mov	r1, r7
 80036d6:	f7fc fd85 	bl	80001e4 <__adddf3>
 80036da:	ec41 0b10 	vmov	d0, r0, r1
 80036de:	b011      	add	sp, #68	@ 0x44
 80036e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e4:	4a91      	ldr	r2, [pc, #580]	@ (800392c <__ieee754_pow+0x28c>)
 80036e6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80036ea:	4590      	cmp	r8, r2
 80036ec:	463d      	mov	r5, r7
 80036ee:	4633      	mov	r3, r6
 80036f0:	d806      	bhi.n	8003700 <__ieee754_pow+0x60>
 80036f2:	d101      	bne.n	80036f8 <__ieee754_pow+0x58>
 80036f4:	2e00      	cmp	r6, #0
 80036f6:	d1ea      	bne.n	80036ce <__ieee754_pow+0x2e>
 80036f8:	4592      	cmp	sl, r2
 80036fa:	d801      	bhi.n	8003700 <__ieee754_pow+0x60>
 80036fc:	d10e      	bne.n	800371c <__ieee754_pow+0x7c>
 80036fe:	b169      	cbz	r1, 800371c <__ieee754_pow+0x7c>
 8003700:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8003704:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8003708:	431d      	orrs	r5, r3
 800370a:	d1e0      	bne.n	80036ce <__ieee754_pow+0x2e>
 800370c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003710:	18db      	adds	r3, r3, r3
 8003712:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8003716:	4152      	adcs	r2, r2
 8003718:	429d      	cmp	r5, r3
 800371a:	e7d4      	b.n	80036c6 <__ieee754_pow+0x26>
 800371c:	2d00      	cmp	r5, #0
 800371e:	46c3      	mov	fp, r8
 8003720:	da3a      	bge.n	8003798 <__ieee754_pow+0xf8>
 8003722:	4a83      	ldr	r2, [pc, #524]	@ (8003930 <__ieee754_pow+0x290>)
 8003724:	4592      	cmp	sl, r2
 8003726:	d84d      	bhi.n	80037c4 <__ieee754_pow+0x124>
 8003728:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800372c:	4592      	cmp	sl, r2
 800372e:	f240 84c7 	bls.w	80040c0 <__ieee754_pow+0xa20>
 8003732:	ea4f 522a 	mov.w	r2, sl, asr #20
 8003736:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800373a:	2a14      	cmp	r2, #20
 800373c:	dd0f      	ble.n	800375e <__ieee754_pow+0xbe>
 800373e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8003742:	fa21 f402 	lsr.w	r4, r1, r2
 8003746:	fa04 f202 	lsl.w	r2, r4, r2
 800374a:	428a      	cmp	r2, r1
 800374c:	f040 84b8 	bne.w	80040c0 <__ieee754_pow+0xa20>
 8003750:	f004 0401 	and.w	r4, r4, #1
 8003754:	f1c4 0402 	rsb	r4, r4, #2
 8003758:	2900      	cmp	r1, #0
 800375a:	d158      	bne.n	800380e <__ieee754_pow+0x16e>
 800375c:	e00e      	b.n	800377c <__ieee754_pow+0xdc>
 800375e:	2900      	cmp	r1, #0
 8003760:	d154      	bne.n	800380c <__ieee754_pow+0x16c>
 8003762:	f1c2 0214 	rsb	r2, r2, #20
 8003766:	fa4a f402 	asr.w	r4, sl, r2
 800376a:	fa04 f202 	lsl.w	r2, r4, r2
 800376e:	4552      	cmp	r2, sl
 8003770:	f040 84a3 	bne.w	80040ba <__ieee754_pow+0xa1a>
 8003774:	f004 0401 	and.w	r4, r4, #1
 8003778:	f1c4 0402 	rsb	r4, r4, #2
 800377c:	4a6d      	ldr	r2, [pc, #436]	@ (8003934 <__ieee754_pow+0x294>)
 800377e:	4592      	cmp	sl, r2
 8003780:	d12e      	bne.n	80037e0 <__ieee754_pow+0x140>
 8003782:	f1b9 0f00 	cmp.w	r9, #0
 8003786:	f280 8494 	bge.w	80040b2 <__ieee754_pow+0xa12>
 800378a:	496a      	ldr	r1, [pc, #424]	@ (8003934 <__ieee754_pow+0x294>)
 800378c:	4632      	mov	r2, r6
 800378e:	463b      	mov	r3, r7
 8003790:	2000      	movs	r0, #0
 8003792:	f7fd f807 	bl	80007a4 <__aeabi_ddiv>
 8003796:	e7a0      	b.n	80036da <__ieee754_pow+0x3a>
 8003798:	2400      	movs	r4, #0
 800379a:	bbc1      	cbnz	r1, 800380e <__ieee754_pow+0x16e>
 800379c:	4a63      	ldr	r2, [pc, #396]	@ (800392c <__ieee754_pow+0x28c>)
 800379e:	4592      	cmp	sl, r2
 80037a0:	d1ec      	bne.n	800377c <__ieee754_pow+0xdc>
 80037a2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80037a6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80037aa:	431a      	orrs	r2, r3
 80037ac:	f000 8479 	beq.w	80040a2 <__ieee754_pow+0xa02>
 80037b0:	4b61      	ldr	r3, [pc, #388]	@ (8003938 <__ieee754_pow+0x298>)
 80037b2:	4598      	cmp	r8, r3
 80037b4:	d908      	bls.n	80037c8 <__ieee754_pow+0x128>
 80037b6:	f1b9 0f00 	cmp.w	r9, #0
 80037ba:	f2c0 8476 	blt.w	80040aa <__ieee754_pow+0xa0a>
 80037be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037c2:	e78a      	b.n	80036da <__ieee754_pow+0x3a>
 80037c4:	2402      	movs	r4, #2
 80037c6:	e7e8      	b.n	800379a <__ieee754_pow+0xfa>
 80037c8:	f1b9 0f00 	cmp.w	r9, #0
 80037cc:	f04f 0000 	mov.w	r0, #0
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	da81      	bge.n	80036da <__ieee754_pow+0x3a>
 80037d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80037da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80037de:	e77c      	b.n	80036da <__ieee754_pow+0x3a>
 80037e0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80037e4:	d106      	bne.n	80037f4 <__ieee754_pow+0x154>
 80037e6:	4632      	mov	r2, r6
 80037e8:	463b      	mov	r3, r7
 80037ea:	4630      	mov	r0, r6
 80037ec:	4639      	mov	r1, r7
 80037ee:	f7fc feaf 	bl	8000550 <__aeabi_dmul>
 80037f2:	e772      	b.n	80036da <__ieee754_pow+0x3a>
 80037f4:	4a51      	ldr	r2, [pc, #324]	@ (800393c <__ieee754_pow+0x29c>)
 80037f6:	4591      	cmp	r9, r2
 80037f8:	d109      	bne.n	800380e <__ieee754_pow+0x16e>
 80037fa:	2d00      	cmp	r5, #0
 80037fc:	db07      	blt.n	800380e <__ieee754_pow+0x16e>
 80037fe:	ec47 6b10 	vmov	d0, r6, r7
 8003802:	b011      	add	sp, #68	@ 0x44
 8003804:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003808:	f000 bd52 	b.w	80042b0 <__ieee754_sqrt>
 800380c:	2400      	movs	r4, #0
 800380e:	ec47 6b10 	vmov	d0, r6, r7
 8003812:	9302      	str	r3, [sp, #8]
 8003814:	f000 fc88 	bl	8004128 <fabs>
 8003818:	9b02      	ldr	r3, [sp, #8]
 800381a:	ec51 0b10 	vmov	r0, r1, d0
 800381e:	bb53      	cbnz	r3, 8003876 <__ieee754_pow+0x1d6>
 8003820:	4b44      	ldr	r3, [pc, #272]	@ (8003934 <__ieee754_pow+0x294>)
 8003822:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8003826:	429a      	cmp	r2, r3
 8003828:	d002      	beq.n	8003830 <__ieee754_pow+0x190>
 800382a:	f1b8 0f00 	cmp.w	r8, #0
 800382e:	d122      	bne.n	8003876 <__ieee754_pow+0x1d6>
 8003830:	f1b9 0f00 	cmp.w	r9, #0
 8003834:	da05      	bge.n	8003842 <__ieee754_pow+0x1a2>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	2000      	movs	r0, #0
 800383c:	493d      	ldr	r1, [pc, #244]	@ (8003934 <__ieee754_pow+0x294>)
 800383e:	f7fc ffb1 	bl	80007a4 <__aeabi_ddiv>
 8003842:	2d00      	cmp	r5, #0
 8003844:	f6bf af49 	bge.w	80036da <__ieee754_pow+0x3a>
 8003848:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800384c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8003850:	ea58 0804 	orrs.w	r8, r8, r4
 8003854:	d108      	bne.n	8003868 <__ieee754_pow+0x1c8>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	4610      	mov	r0, r2
 800385c:	4619      	mov	r1, r3
 800385e:	f7fc fcbf 	bl	80001e0 <__aeabi_dsub>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	e794      	b.n	8003792 <__ieee754_pow+0xf2>
 8003868:	2c01      	cmp	r4, #1
 800386a:	f47f af36 	bne.w	80036da <__ieee754_pow+0x3a>
 800386e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003872:	4619      	mov	r1, r3
 8003874:	e731      	b.n	80036da <__ieee754_pow+0x3a>
 8003876:	0feb      	lsrs	r3, r5, #31
 8003878:	3b01      	subs	r3, #1
 800387a:	ea53 0204 	orrs.w	r2, r3, r4
 800387e:	d102      	bne.n	8003886 <__ieee754_pow+0x1e6>
 8003880:	4632      	mov	r2, r6
 8003882:	463b      	mov	r3, r7
 8003884:	e7e9      	b.n	800385a <__ieee754_pow+0x1ba>
 8003886:	3c01      	subs	r4, #1
 8003888:	431c      	orrs	r4, r3
 800388a:	d016      	beq.n	80038ba <__ieee754_pow+0x21a>
 800388c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8003918 <__ieee754_pow+0x278>
 8003890:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8003894:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003898:	f240 8112 	bls.w	8003ac0 <__ieee754_pow+0x420>
 800389c:	4b28      	ldr	r3, [pc, #160]	@ (8003940 <__ieee754_pow+0x2a0>)
 800389e:	459a      	cmp	sl, r3
 80038a0:	4b25      	ldr	r3, [pc, #148]	@ (8003938 <__ieee754_pow+0x298>)
 80038a2:	d916      	bls.n	80038d2 <__ieee754_pow+0x232>
 80038a4:	4598      	cmp	r8, r3
 80038a6:	d80b      	bhi.n	80038c0 <__ieee754_pow+0x220>
 80038a8:	f1b9 0f00 	cmp.w	r9, #0
 80038ac:	da0b      	bge.n	80038c6 <__ieee754_pow+0x226>
 80038ae:	2000      	movs	r0, #0
 80038b0:	b011      	add	sp, #68	@ 0x44
 80038b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b6:	f000 bcf3 	b.w	80042a0 <__math_oflow>
 80038ba:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8003920 <__ieee754_pow+0x280>
 80038be:	e7e7      	b.n	8003890 <__ieee754_pow+0x1f0>
 80038c0:	f1b9 0f00 	cmp.w	r9, #0
 80038c4:	dcf3      	bgt.n	80038ae <__ieee754_pow+0x20e>
 80038c6:	2000      	movs	r0, #0
 80038c8:	b011      	add	sp, #68	@ 0x44
 80038ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ce:	f000 bcdf 	b.w	8004290 <__math_uflow>
 80038d2:	4598      	cmp	r8, r3
 80038d4:	d20c      	bcs.n	80038f0 <__ieee754_pow+0x250>
 80038d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038da:	2200      	movs	r2, #0
 80038dc:	2300      	movs	r3, #0
 80038de:	f7fd f8a9 	bl	8000a34 <__aeabi_dcmplt>
 80038e2:	3800      	subs	r0, #0
 80038e4:	bf18      	it	ne
 80038e6:	2001      	movne	r0, #1
 80038e8:	f1b9 0f00 	cmp.w	r9, #0
 80038ec:	daec      	bge.n	80038c8 <__ieee754_pow+0x228>
 80038ee:	e7df      	b.n	80038b0 <__ieee754_pow+0x210>
 80038f0:	4b10      	ldr	r3, [pc, #64]	@ (8003934 <__ieee754_pow+0x294>)
 80038f2:	4598      	cmp	r8, r3
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	d924      	bls.n	8003944 <__ieee754_pow+0x2a4>
 80038fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038fe:	2300      	movs	r3, #0
 8003900:	f7fd f898 	bl	8000a34 <__aeabi_dcmplt>
 8003904:	3800      	subs	r0, #0
 8003906:	bf18      	it	ne
 8003908:	2001      	movne	r0, #1
 800390a:	f1b9 0f00 	cmp.w	r9, #0
 800390e:	dccf      	bgt.n	80038b0 <__ieee754_pow+0x210>
 8003910:	e7da      	b.n	80038c8 <__ieee754_pow+0x228>
 8003912:	bf00      	nop
 8003914:	f3af 8000 	nop.w
 8003918:	00000000 	.word	0x00000000
 800391c:	3ff00000 	.word	0x3ff00000
 8003920:	00000000 	.word	0x00000000
 8003924:	bff00000 	.word	0xbff00000
 8003928:	fff00000 	.word	0xfff00000
 800392c:	7ff00000 	.word	0x7ff00000
 8003930:	433fffff 	.word	0x433fffff
 8003934:	3ff00000 	.word	0x3ff00000
 8003938:	3fefffff 	.word	0x3fefffff
 800393c:	3fe00000 	.word	0x3fe00000
 8003940:	43f00000 	.word	0x43f00000
 8003944:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab0 <__ieee754_pow+0x410>)
 8003946:	f7fc fc4b 	bl	80001e0 <__aeabi_dsub>
 800394a:	a351      	add	r3, pc, #324	@ (adr r3, 8003a90 <__ieee754_pow+0x3f0>)
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	4604      	mov	r4, r0
 8003952:	460d      	mov	r5, r1
 8003954:	f7fc fdfc 	bl	8000550 <__aeabi_dmul>
 8003958:	a34f      	add	r3, pc, #316	@ (adr r3, 8003a98 <__ieee754_pow+0x3f8>)
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	4606      	mov	r6, r0
 8003960:	460f      	mov	r7, r1
 8003962:	4620      	mov	r0, r4
 8003964:	4629      	mov	r1, r5
 8003966:	f7fc fdf3 	bl	8000550 <__aeabi_dmul>
 800396a:	4b52      	ldr	r3, [pc, #328]	@ (8003ab4 <__ieee754_pow+0x414>)
 800396c:	4682      	mov	sl, r0
 800396e:	468b      	mov	fp, r1
 8003970:	2200      	movs	r2, #0
 8003972:	4620      	mov	r0, r4
 8003974:	4629      	mov	r1, r5
 8003976:	f7fc fdeb 	bl	8000550 <__aeabi_dmul>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	a148      	add	r1, pc, #288	@ (adr r1, 8003aa0 <__ieee754_pow+0x400>)
 8003980:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003984:	f7fc fc2c 	bl	80001e0 <__aeabi_dsub>
 8003988:	4622      	mov	r2, r4
 800398a:	462b      	mov	r3, r5
 800398c:	f7fc fde0 	bl	8000550 <__aeabi_dmul>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	2000      	movs	r0, #0
 8003996:	4948      	ldr	r1, [pc, #288]	@ (8003ab8 <__ieee754_pow+0x418>)
 8003998:	f7fc fc22 	bl	80001e0 <__aeabi_dsub>
 800399c:	4622      	mov	r2, r4
 800399e:	4680      	mov	r8, r0
 80039a0:	4689      	mov	r9, r1
 80039a2:	462b      	mov	r3, r5
 80039a4:	4620      	mov	r0, r4
 80039a6:	4629      	mov	r1, r5
 80039a8:	f7fc fdd2 	bl	8000550 <__aeabi_dmul>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4640      	mov	r0, r8
 80039b2:	4649      	mov	r1, r9
 80039b4:	f7fc fdcc 	bl	8000550 <__aeabi_dmul>
 80039b8:	a33b      	add	r3, pc, #236	@ (adr r3, 8003aa8 <__ieee754_pow+0x408>)
 80039ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039be:	f7fc fdc7 	bl	8000550 <__aeabi_dmul>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4650      	mov	r0, sl
 80039c8:	4659      	mov	r1, fp
 80039ca:	f7fc fc09 	bl	80001e0 <__aeabi_dsub>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4680      	mov	r8, r0
 80039d4:	4689      	mov	r9, r1
 80039d6:	4630      	mov	r0, r6
 80039d8:	4639      	mov	r1, r7
 80039da:	f7fc fc03 	bl	80001e4 <__adddf3>
 80039de:	2400      	movs	r4, #0
 80039e0:	4632      	mov	r2, r6
 80039e2:	463b      	mov	r3, r7
 80039e4:	4620      	mov	r0, r4
 80039e6:	460d      	mov	r5, r1
 80039e8:	f7fc fbfa 	bl	80001e0 <__aeabi_dsub>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4640      	mov	r0, r8
 80039f2:	4649      	mov	r1, r9
 80039f4:	f7fc fbf4 	bl	80001e0 <__aeabi_dsub>
 80039f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80039fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a00:	2300      	movs	r3, #0
 8003a02:	9304      	str	r3, [sp, #16]
 8003a04:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003a08:	4606      	mov	r6, r0
 8003a0a:	460f      	mov	r7, r1
 8003a0c:	4652      	mov	r2, sl
 8003a0e:	465b      	mov	r3, fp
 8003a10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a14:	f7fc fbe4 	bl	80001e0 <__aeabi_dsub>
 8003a18:	4622      	mov	r2, r4
 8003a1a:	462b      	mov	r3, r5
 8003a1c:	f7fc fd98 	bl	8000550 <__aeabi_dmul>
 8003a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a24:	4680      	mov	r8, r0
 8003a26:	4689      	mov	r9, r1
 8003a28:	4630      	mov	r0, r6
 8003a2a:	4639      	mov	r1, r7
 8003a2c:	f7fc fd90 	bl	8000550 <__aeabi_dmul>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4640      	mov	r0, r8
 8003a36:	4649      	mov	r1, r9
 8003a38:	f7fc fbd4 	bl	80001e4 <__adddf3>
 8003a3c:	4652      	mov	r2, sl
 8003a3e:	465b      	mov	r3, fp
 8003a40:	4606      	mov	r6, r0
 8003a42:	460f      	mov	r7, r1
 8003a44:	4620      	mov	r0, r4
 8003a46:	4629      	mov	r1, r5
 8003a48:	f7fc fd82 	bl	8000550 <__aeabi_dmul>
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4602      	mov	r2, r0
 8003a50:	4680      	mov	r8, r0
 8003a52:	4689      	mov	r9, r1
 8003a54:	4630      	mov	r0, r6
 8003a56:	4639      	mov	r1, r7
 8003a58:	f7fc fbc4 	bl	80001e4 <__adddf3>
 8003a5c:	4b17      	ldr	r3, [pc, #92]	@ (8003abc <__ieee754_pow+0x41c>)
 8003a5e:	4299      	cmp	r1, r3
 8003a60:	4604      	mov	r4, r0
 8003a62:	460d      	mov	r5, r1
 8003a64:	468a      	mov	sl, r1
 8003a66:	468b      	mov	fp, r1
 8003a68:	f340 82ef 	ble.w	800404a <__ieee754_pow+0x9aa>
 8003a6c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8003a70:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8003a74:	4303      	orrs	r3, r0
 8003a76:	f000 81e8 	beq.w	8003e4a <__ieee754_pow+0x7aa>
 8003a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2300      	movs	r3, #0
 8003a82:	f7fc ffd7 	bl	8000a34 <__aeabi_dcmplt>
 8003a86:	3800      	subs	r0, #0
 8003a88:	bf18      	it	ne
 8003a8a:	2001      	movne	r0, #1
 8003a8c:	e710      	b.n	80038b0 <__ieee754_pow+0x210>
 8003a8e:	bf00      	nop
 8003a90:	60000000 	.word	0x60000000
 8003a94:	3ff71547 	.word	0x3ff71547
 8003a98:	f85ddf44 	.word	0xf85ddf44
 8003a9c:	3e54ae0b 	.word	0x3e54ae0b
 8003aa0:	55555555 	.word	0x55555555
 8003aa4:	3fd55555 	.word	0x3fd55555
 8003aa8:	652b82fe 	.word	0x652b82fe
 8003aac:	3ff71547 	.word	0x3ff71547
 8003ab0:	3ff00000 	.word	0x3ff00000
 8003ab4:	3fd00000 	.word	0x3fd00000
 8003ab8:	3fe00000 	.word	0x3fe00000
 8003abc:	408fffff 	.word	0x408fffff
 8003ac0:	4bd5      	ldr	r3, [pc, #852]	@ (8003e18 <__ieee754_pow+0x778>)
 8003ac2:	402b      	ands	r3, r5
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	b92b      	cbnz	r3, 8003ad4 <__ieee754_pow+0x434>
 8003ac8:	4bd4      	ldr	r3, [pc, #848]	@ (8003e1c <__ieee754_pow+0x77c>)
 8003aca:	f7fc fd41 	bl	8000550 <__aeabi_dmul>
 8003ace:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8003ad2:	468b      	mov	fp, r1
 8003ad4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8003ad8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8003adc:	4413      	add	r3, r2
 8003ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ae0:	4bcf      	ldr	r3, [pc, #828]	@ (8003e20 <__ieee754_pow+0x780>)
 8003ae2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8003ae6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8003aea:	459b      	cmp	fp, r3
 8003aec:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8003af0:	dd08      	ble.n	8003b04 <__ieee754_pow+0x464>
 8003af2:	4bcc      	ldr	r3, [pc, #816]	@ (8003e24 <__ieee754_pow+0x784>)
 8003af4:	459b      	cmp	fp, r3
 8003af6:	f340 81a5 	ble.w	8003e44 <__ieee754_pow+0x7a4>
 8003afa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003afc:	3301      	adds	r3, #1
 8003afe:	930a      	str	r3, [sp, #40]	@ 0x28
 8003b00:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8003b04:	f04f 0a00 	mov.w	sl, #0
 8003b08:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003b0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b0e:	4bc6      	ldr	r3, [pc, #792]	@ (8003e28 <__ieee754_pow+0x788>)
 8003b10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003b14:	ed93 7b00 	vldr	d7, [r3]
 8003b18:	4629      	mov	r1, r5
 8003b1a:	ec53 2b17 	vmov	r2, r3, d7
 8003b1e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003b22:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003b26:	f7fc fb5b 	bl	80001e0 <__aeabi_dsub>
 8003b2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b2e:	4606      	mov	r6, r0
 8003b30:	460f      	mov	r7, r1
 8003b32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b36:	f7fc fb55 	bl	80001e4 <__adddf3>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	2000      	movs	r0, #0
 8003b40:	49ba      	ldr	r1, [pc, #744]	@ (8003e2c <__ieee754_pow+0x78c>)
 8003b42:	f7fc fe2f 	bl	80007a4 <__aeabi_ddiv>
 8003b46:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4630      	mov	r0, r6
 8003b50:	4639      	mov	r1, r7
 8003b52:	f7fc fcfd 	bl	8000550 <__aeabi_dmul>
 8003b56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b5a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8003b5e:	106d      	asrs	r5, r5, #1
 8003b60:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8003b64:	f04f 0b00 	mov.w	fp, #0
 8003b68:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8003b6c:	4661      	mov	r1, ip
 8003b6e:	2200      	movs	r2, #0
 8003b70:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8003b74:	4658      	mov	r0, fp
 8003b76:	46e1      	mov	r9, ip
 8003b78:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	461d      	mov	r5, r3
 8003b80:	f7fc fce6 	bl	8000550 <__aeabi_dmul>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4630      	mov	r0, r6
 8003b8a:	4639      	mov	r1, r7
 8003b8c:	f7fc fb28 	bl	80001e0 <__aeabi_dsub>
 8003b90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b94:	4606      	mov	r6, r0
 8003b96:	460f      	mov	r7, r1
 8003b98:	4620      	mov	r0, r4
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	f7fc fb20 	bl	80001e0 <__aeabi_dsub>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ba8:	f7fc fb1a 	bl	80001e0 <__aeabi_dsub>
 8003bac:	465a      	mov	r2, fp
 8003bae:	464b      	mov	r3, r9
 8003bb0:	f7fc fcce 	bl	8000550 <__aeabi_dmul>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4630      	mov	r0, r6
 8003bba:	4639      	mov	r1, r7
 8003bbc:	f7fc fb10 	bl	80001e0 <__aeabi_dsub>
 8003bc0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003bc4:	f7fc fcc4 	bl	8000550 <__aeabi_dmul>
 8003bc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	f7fc fcbc 	bl	8000550 <__aeabi_dmul>
 8003bd8:	a37d      	add	r3, pc, #500	@ (adr r3, 8003dd0 <__ieee754_pow+0x730>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	4604      	mov	r4, r0
 8003be0:	460d      	mov	r5, r1
 8003be2:	f7fc fcb5 	bl	8000550 <__aeabi_dmul>
 8003be6:	a37c      	add	r3, pc, #496	@ (adr r3, 8003dd8 <__ieee754_pow+0x738>)
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f7fc fafa 	bl	80001e4 <__adddf3>
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	f7fc fcac 	bl	8000550 <__aeabi_dmul>
 8003bf8:	a379      	add	r3, pc, #484	@ (adr r3, 8003de0 <__ieee754_pow+0x740>)
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	f7fc faf1 	bl	80001e4 <__adddf3>
 8003c02:	4622      	mov	r2, r4
 8003c04:	462b      	mov	r3, r5
 8003c06:	f7fc fca3 	bl	8000550 <__aeabi_dmul>
 8003c0a:	a377      	add	r3, pc, #476	@ (adr r3, 8003de8 <__ieee754_pow+0x748>)
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	f7fc fae8 	bl	80001e4 <__adddf3>
 8003c14:	4622      	mov	r2, r4
 8003c16:	462b      	mov	r3, r5
 8003c18:	f7fc fc9a 	bl	8000550 <__aeabi_dmul>
 8003c1c:	a374      	add	r3, pc, #464	@ (adr r3, 8003df0 <__ieee754_pow+0x750>)
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	f7fc fadf 	bl	80001e4 <__adddf3>
 8003c26:	4622      	mov	r2, r4
 8003c28:	462b      	mov	r3, r5
 8003c2a:	f7fc fc91 	bl	8000550 <__aeabi_dmul>
 8003c2e:	a372      	add	r3, pc, #456	@ (adr r3, 8003df8 <__ieee754_pow+0x758>)
 8003c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c34:	f7fc fad6 	bl	80001e4 <__adddf3>
 8003c38:	4622      	mov	r2, r4
 8003c3a:	4606      	mov	r6, r0
 8003c3c:	460f      	mov	r7, r1
 8003c3e:	462b      	mov	r3, r5
 8003c40:	4620      	mov	r0, r4
 8003c42:	4629      	mov	r1, r5
 8003c44:	f7fc fc84 	bl	8000550 <__aeabi_dmul>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	4639      	mov	r1, r7
 8003c50:	f7fc fc7e 	bl	8000550 <__aeabi_dmul>
 8003c54:	465a      	mov	r2, fp
 8003c56:	4604      	mov	r4, r0
 8003c58:	460d      	mov	r5, r1
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c60:	f7fc fac0 	bl	80001e4 <__adddf3>
 8003c64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c68:	f7fc fc72 	bl	8000550 <__aeabi_dmul>
 8003c6c:	4622      	mov	r2, r4
 8003c6e:	462b      	mov	r3, r5
 8003c70:	f7fc fab8 	bl	80001e4 <__adddf3>
 8003c74:	465a      	mov	r2, fp
 8003c76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	4658      	mov	r0, fp
 8003c7e:	4649      	mov	r1, r9
 8003c80:	f7fc fc66 	bl	8000550 <__aeabi_dmul>
 8003c84:	4b6a      	ldr	r3, [pc, #424]	@ (8003e30 <__ieee754_pow+0x790>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	4606      	mov	r6, r0
 8003c8a:	460f      	mov	r7, r1
 8003c8c:	f7fc faaa 	bl	80001e4 <__adddf3>
 8003c90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c94:	f7fc faa6 	bl	80001e4 <__adddf3>
 8003c98:	46d8      	mov	r8, fp
 8003c9a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8003c9e:	460d      	mov	r5, r1
 8003ca0:	465a      	mov	r2, fp
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4640      	mov	r0, r8
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8003cac:	f7fc fc50 	bl	8000550 <__aeabi_dmul>
 8003cb0:	465c      	mov	r4, fp
 8003cb2:	4680      	mov	r8, r0
 8003cb4:	4689      	mov	r9, r1
 8003cb6:	4b5e      	ldr	r3, [pc, #376]	@ (8003e30 <__ieee754_pow+0x790>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	4620      	mov	r0, r4
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	f7fc fa8f 	bl	80001e0 <__aeabi_dsub>
 8003cc2:	4632      	mov	r2, r6
 8003cc4:	463b      	mov	r3, r7
 8003cc6:	f7fc fa8b 	bl	80001e0 <__aeabi_dsub>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003cd2:	f7fc fa85 	bl	80001e0 <__aeabi_dsub>
 8003cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cda:	f7fc fc39 	bl	8000550 <__aeabi_dmul>
 8003cde:	4622      	mov	r2, r4
 8003ce0:	4606      	mov	r6, r0
 8003ce2:	460f      	mov	r7, r1
 8003ce4:	462b      	mov	r3, r5
 8003ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003cea:	f7fc fc31 	bl	8000550 <__aeabi_dmul>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	4639      	mov	r1, r7
 8003cf6:	f7fc fa75 	bl	80001e4 <__adddf3>
 8003cfa:	4606      	mov	r6, r0
 8003cfc:	460f      	mov	r7, r1
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4640      	mov	r0, r8
 8003d04:	4649      	mov	r1, r9
 8003d06:	f7fc fa6d 	bl	80001e4 <__adddf3>
 8003d0a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8003d0e:	a33c      	add	r3, pc, #240	@ (adr r3, 8003e00 <__ieee754_pow+0x760>)
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	4658      	mov	r0, fp
 8003d16:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8003d1a:	460d      	mov	r5, r1
 8003d1c:	f7fc fc18 	bl	8000550 <__aeabi_dmul>
 8003d20:	465c      	mov	r4, fp
 8003d22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d26:	4642      	mov	r2, r8
 8003d28:	464b      	mov	r3, r9
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	f7fc fa57 	bl	80001e0 <__aeabi_dsub>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4630      	mov	r0, r6
 8003d38:	4639      	mov	r1, r7
 8003d3a:	f7fc fa51 	bl	80001e0 <__aeabi_dsub>
 8003d3e:	a332      	add	r3, pc, #200	@ (adr r3, 8003e08 <__ieee754_pow+0x768>)
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f7fc fc04 	bl	8000550 <__aeabi_dmul>
 8003d48:	a331      	add	r3, pc, #196	@ (adr r3, 8003e10 <__ieee754_pow+0x770>)
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	4606      	mov	r6, r0
 8003d50:	460f      	mov	r7, r1
 8003d52:	4620      	mov	r0, r4
 8003d54:	4629      	mov	r1, r5
 8003d56:	f7fc fbfb 	bl	8000550 <__aeabi_dmul>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4630      	mov	r0, r6
 8003d60:	4639      	mov	r1, r7
 8003d62:	f7fc fa3f 	bl	80001e4 <__adddf3>
 8003d66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003d68:	4b32      	ldr	r3, [pc, #200]	@ (8003e34 <__ieee754_pow+0x794>)
 8003d6a:	4413      	add	r3, r2
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	f7fc fa38 	bl	80001e4 <__adddf3>
 8003d74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003d78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003d7a:	f7fc fb7f 	bl	800047c <__aeabi_i2d>
 8003d7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003d80:	4b2d      	ldr	r3, [pc, #180]	@ (8003e38 <__ieee754_pow+0x798>)
 8003d82:	4413      	add	r3, r2
 8003d84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d88:	4606      	mov	r6, r0
 8003d8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d8e:	460f      	mov	r7, r1
 8003d90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d94:	f7fc fa26 	bl	80001e4 <__adddf3>
 8003d98:	4642      	mov	r2, r8
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	f7fc fa22 	bl	80001e4 <__adddf3>
 8003da0:	4632      	mov	r2, r6
 8003da2:	463b      	mov	r3, r7
 8003da4:	f7fc fa1e 	bl	80001e4 <__adddf3>
 8003da8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8003dac:	4632      	mov	r2, r6
 8003dae:	463b      	mov	r3, r7
 8003db0:	4658      	mov	r0, fp
 8003db2:	460d      	mov	r5, r1
 8003db4:	f7fc fa14 	bl	80001e0 <__aeabi_dsub>
 8003db8:	4642      	mov	r2, r8
 8003dba:	464b      	mov	r3, r9
 8003dbc:	f7fc fa10 	bl	80001e0 <__aeabi_dsub>
 8003dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dc4:	f7fc fa0c 	bl	80001e0 <__aeabi_dsub>
 8003dc8:	465c      	mov	r4, fp
 8003dca:	4602      	mov	r2, r0
 8003dcc:	e036      	b.n	8003e3c <__ieee754_pow+0x79c>
 8003dce:	bf00      	nop
 8003dd0:	4a454eef 	.word	0x4a454eef
 8003dd4:	3fca7e28 	.word	0x3fca7e28
 8003dd8:	93c9db65 	.word	0x93c9db65
 8003ddc:	3fcd864a 	.word	0x3fcd864a
 8003de0:	a91d4101 	.word	0xa91d4101
 8003de4:	3fd17460 	.word	0x3fd17460
 8003de8:	518f264d 	.word	0x518f264d
 8003dec:	3fd55555 	.word	0x3fd55555
 8003df0:	db6fabff 	.word	0xdb6fabff
 8003df4:	3fdb6db6 	.word	0x3fdb6db6
 8003df8:	33333303 	.word	0x33333303
 8003dfc:	3fe33333 	.word	0x3fe33333
 8003e00:	e0000000 	.word	0xe0000000
 8003e04:	3feec709 	.word	0x3feec709
 8003e08:	dc3a03fd 	.word	0xdc3a03fd
 8003e0c:	3feec709 	.word	0x3feec709
 8003e10:	145b01f5 	.word	0x145b01f5
 8003e14:	be3e2fe0 	.word	0xbe3e2fe0
 8003e18:	7ff00000 	.word	0x7ff00000
 8003e1c:	43400000 	.word	0x43400000
 8003e20:	0003988e 	.word	0x0003988e
 8003e24:	000bb679 	.word	0x000bb679
 8003e28:	080044b0 	.word	0x080044b0
 8003e2c:	3ff00000 	.word	0x3ff00000
 8003e30:	40080000 	.word	0x40080000
 8003e34:	08004490 	.word	0x08004490
 8003e38:	080044a0 	.word	0x080044a0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e42:	e5d7      	b.n	80039f4 <__ieee754_pow+0x354>
 8003e44:	f04f 0a01 	mov.w	sl, #1
 8003e48:	e65e      	b.n	8003b08 <__ieee754_pow+0x468>
 8003e4a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800411c <__ieee754_pow+0xa7c>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	4630      	mov	r0, r6
 8003e52:	4639      	mov	r1, r7
 8003e54:	f7fc f9c6 	bl	80001e4 <__adddf3>
 8003e58:	4642      	mov	r2, r8
 8003e5a:	e9cd 0100 	strd	r0, r1, [sp]
 8003e5e:	464b      	mov	r3, r9
 8003e60:	4620      	mov	r0, r4
 8003e62:	4629      	mov	r1, r5
 8003e64:	f7fc f9bc 	bl	80001e0 <__aeabi_dsub>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e70:	f7fc fdfe 	bl	8000a70 <__aeabi_dcmpgt>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	f47f ae00 	bne.w	8003a7a <__ieee754_pow+0x3da>
 8003e7a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8003e7e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003e82:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8003e86:	fa43 fa0a 	asr.w	sl, r3, sl
 8003e8a:	44da      	add	sl, fp
 8003e8c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8003e90:	489d      	ldr	r0, [pc, #628]	@ (8004108 <__ieee754_pow+0xa68>)
 8003e92:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8003e96:	4108      	asrs	r0, r1
 8003e98:	ea00 030a 	and.w	r3, r0, sl
 8003e9c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8003ea0:	f1c1 0114 	rsb	r1, r1, #20
 8003ea4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8003ea8:	fa4a fa01 	asr.w	sl, sl, r1
 8003eac:	f1bb 0f00 	cmp.w	fp, #0
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	bfb8      	it	lt
 8003eba:	f1ca 0a00 	rsblt	sl, sl, #0
 8003ebe:	f7fc f98f 	bl	80001e0 <__aeabi_dsub>
 8003ec2:	4680      	mov	r8, r0
 8003ec4:	4689      	mov	r9, r1
 8003ec6:	4632      	mov	r2, r6
 8003ec8:	463b      	mov	r3, r7
 8003eca:	4640      	mov	r0, r8
 8003ecc:	4649      	mov	r1, r9
 8003ece:	f7fc f989 	bl	80001e4 <__adddf3>
 8003ed2:	2400      	movs	r4, #0
 8003ed4:	a37c      	add	r3, pc, #496	@ (adr r3, 80040c8 <__ieee754_pow+0xa28>)
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	4620      	mov	r0, r4
 8003edc:	460d      	mov	r5, r1
 8003ede:	f7fc fb37 	bl	8000550 <__aeabi_dmul>
 8003ee2:	4642      	mov	r2, r8
 8003ee4:	e9cd 0100 	strd	r0, r1, [sp]
 8003ee8:	464b      	mov	r3, r9
 8003eea:	4620      	mov	r0, r4
 8003eec:	4629      	mov	r1, r5
 8003eee:	f7fc f977 	bl	80001e0 <__aeabi_dsub>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	4639      	mov	r1, r7
 8003efa:	f7fc f971 	bl	80001e0 <__aeabi_dsub>
 8003efe:	a374      	add	r3, pc, #464	@ (adr r3, 80040d0 <__ieee754_pow+0xa30>)
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	f7fc fb24 	bl	8000550 <__aeabi_dmul>
 8003f08:	a373      	add	r3, pc, #460	@ (adr r3, 80040d8 <__ieee754_pow+0xa38>)
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	4680      	mov	r8, r0
 8003f10:	4689      	mov	r9, r1
 8003f12:	4620      	mov	r0, r4
 8003f14:	4629      	mov	r1, r5
 8003f16:	f7fc fb1b 	bl	8000550 <__aeabi_dmul>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4640      	mov	r0, r8
 8003f20:	4649      	mov	r1, r9
 8003f22:	f7fc f95f 	bl	80001e4 <__adddf3>
 8003f26:	4604      	mov	r4, r0
 8003f28:	460d      	mov	r5, r1
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f32:	f7fc f957 	bl	80001e4 <__adddf3>
 8003f36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f3a:	4680      	mov	r8, r0
 8003f3c:	4689      	mov	r9, r1
 8003f3e:	f7fc f94f 	bl	80001e0 <__aeabi_dsub>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4620      	mov	r0, r4
 8003f48:	4629      	mov	r1, r5
 8003f4a:	f7fc f949 	bl	80001e0 <__aeabi_dsub>
 8003f4e:	4642      	mov	r2, r8
 8003f50:	4606      	mov	r6, r0
 8003f52:	460f      	mov	r7, r1
 8003f54:	464b      	mov	r3, r9
 8003f56:	4640      	mov	r0, r8
 8003f58:	4649      	mov	r1, r9
 8003f5a:	f7fc faf9 	bl	8000550 <__aeabi_dmul>
 8003f5e:	a360      	add	r3, pc, #384	@ (adr r3, 80040e0 <__ieee754_pow+0xa40>)
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	4604      	mov	r4, r0
 8003f66:	460d      	mov	r5, r1
 8003f68:	f7fc faf2 	bl	8000550 <__aeabi_dmul>
 8003f6c:	a35e      	add	r3, pc, #376	@ (adr r3, 80040e8 <__ieee754_pow+0xa48>)
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f7fc f935 	bl	80001e0 <__aeabi_dsub>
 8003f76:	4622      	mov	r2, r4
 8003f78:	462b      	mov	r3, r5
 8003f7a:	f7fc fae9 	bl	8000550 <__aeabi_dmul>
 8003f7e:	a35c      	add	r3, pc, #368	@ (adr r3, 80040f0 <__ieee754_pow+0xa50>)
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f7fc f92e 	bl	80001e4 <__adddf3>
 8003f88:	4622      	mov	r2, r4
 8003f8a:	462b      	mov	r3, r5
 8003f8c:	f7fc fae0 	bl	8000550 <__aeabi_dmul>
 8003f90:	a359      	add	r3, pc, #356	@ (adr r3, 80040f8 <__ieee754_pow+0xa58>)
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f7fc f923 	bl	80001e0 <__aeabi_dsub>
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	462b      	mov	r3, r5
 8003f9e:	f7fc fad7 	bl	8000550 <__aeabi_dmul>
 8003fa2:	a357      	add	r3, pc, #348	@ (adr r3, 8004100 <__ieee754_pow+0xa60>)
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f7fc f91c 	bl	80001e4 <__adddf3>
 8003fac:	4622      	mov	r2, r4
 8003fae:	462b      	mov	r3, r5
 8003fb0:	f7fc face 	bl	8000550 <__aeabi_dmul>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4640      	mov	r0, r8
 8003fba:	4649      	mov	r1, r9
 8003fbc:	f7fc f910 	bl	80001e0 <__aeabi_dsub>
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	460d      	mov	r5, r1
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4640      	mov	r0, r8
 8003fca:	4649      	mov	r1, r9
 8003fcc:	f7fc fac0 	bl	8000550 <__aeabi_dmul>
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	e9cd 0100 	strd	r0, r1, [sp]
 8003fd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003fda:	4620      	mov	r0, r4
 8003fdc:	4629      	mov	r1, r5
 8003fde:	f7fc f8ff 	bl	80001e0 <__aeabi_dsub>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003fea:	f7fc fbdb 	bl	80007a4 <__aeabi_ddiv>
 8003fee:	4632      	mov	r2, r6
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	460d      	mov	r5, r1
 8003ff4:	463b      	mov	r3, r7
 8003ff6:	4640      	mov	r0, r8
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	f7fc faa9 	bl	8000550 <__aeabi_dmul>
 8003ffe:	4632      	mov	r2, r6
 8004000:	463b      	mov	r3, r7
 8004002:	f7fc f8ef 	bl	80001e4 <__adddf3>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4620      	mov	r0, r4
 800400c:	4629      	mov	r1, r5
 800400e:	f7fc f8e7 	bl	80001e0 <__aeabi_dsub>
 8004012:	4642      	mov	r2, r8
 8004014:	464b      	mov	r3, r9
 8004016:	f7fc f8e3 	bl	80001e0 <__aeabi_dsub>
 800401a:	460b      	mov	r3, r1
 800401c:	4602      	mov	r2, r0
 800401e:	493b      	ldr	r1, [pc, #236]	@ (800410c <__ieee754_pow+0xa6c>)
 8004020:	2000      	movs	r0, #0
 8004022:	f7fc f8dd 	bl	80001e0 <__aeabi_dsub>
 8004026:	ec41 0b10 	vmov	d0, r0, r1
 800402a:	ee10 3a90 	vmov	r3, s1
 800402e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8004032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004036:	da30      	bge.n	800409a <__ieee754_pow+0x9fa>
 8004038:	4650      	mov	r0, sl
 800403a:	f000 f87d 	bl	8004138 <scalbn>
 800403e:	ec51 0b10 	vmov	r0, r1, d0
 8004042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004046:	f7ff bbd2 	b.w	80037ee <__ieee754_pow+0x14e>
 800404a:	4c31      	ldr	r4, [pc, #196]	@ (8004110 <__ieee754_pow+0xa70>)
 800404c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004050:	42a3      	cmp	r3, r4
 8004052:	d91a      	bls.n	800408a <__ieee754_pow+0x9ea>
 8004054:	4b2f      	ldr	r3, [pc, #188]	@ (8004114 <__ieee754_pow+0xa74>)
 8004056:	440b      	add	r3, r1
 8004058:	4303      	orrs	r3, r0
 800405a:	d009      	beq.n	8004070 <__ieee754_pow+0x9d0>
 800405c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004060:	2200      	movs	r2, #0
 8004062:	2300      	movs	r3, #0
 8004064:	f7fc fce6 	bl	8000a34 <__aeabi_dcmplt>
 8004068:	3800      	subs	r0, #0
 800406a:	bf18      	it	ne
 800406c:	2001      	movne	r0, #1
 800406e:	e42b      	b.n	80038c8 <__ieee754_pow+0x228>
 8004070:	4642      	mov	r2, r8
 8004072:	464b      	mov	r3, r9
 8004074:	f7fc f8b4 	bl	80001e0 <__aeabi_dsub>
 8004078:	4632      	mov	r2, r6
 800407a:	463b      	mov	r3, r7
 800407c:	f7fc fcee 	bl	8000a5c <__aeabi_dcmpge>
 8004080:	2800      	cmp	r0, #0
 8004082:	d1eb      	bne.n	800405c <__ieee754_pow+0x9bc>
 8004084:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8004124 <__ieee754_pow+0xa84>
 8004088:	e6f7      	b.n	8003e7a <__ieee754_pow+0x7da>
 800408a:	469a      	mov	sl, r3
 800408c:	4b22      	ldr	r3, [pc, #136]	@ (8004118 <__ieee754_pow+0xa78>)
 800408e:	459a      	cmp	sl, r3
 8004090:	f63f aef3 	bhi.w	8003e7a <__ieee754_pow+0x7da>
 8004094:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004098:	e715      	b.n	8003ec6 <__ieee754_pow+0x826>
 800409a:	ec51 0b10 	vmov	r0, r1, d0
 800409e:	4619      	mov	r1, r3
 80040a0:	e7cf      	b.n	8004042 <__ieee754_pow+0x9a2>
 80040a2:	491a      	ldr	r1, [pc, #104]	@ (800410c <__ieee754_pow+0xa6c>)
 80040a4:	2000      	movs	r0, #0
 80040a6:	f7ff bb18 	b.w	80036da <__ieee754_pow+0x3a>
 80040aa:	2000      	movs	r0, #0
 80040ac:	2100      	movs	r1, #0
 80040ae:	f7ff bb14 	b.w	80036da <__ieee754_pow+0x3a>
 80040b2:	4630      	mov	r0, r6
 80040b4:	4639      	mov	r1, r7
 80040b6:	f7ff bb10 	b.w	80036da <__ieee754_pow+0x3a>
 80040ba:	460c      	mov	r4, r1
 80040bc:	f7ff bb5e 	b.w	800377c <__ieee754_pow+0xdc>
 80040c0:	2400      	movs	r4, #0
 80040c2:	f7ff bb49 	b.w	8003758 <__ieee754_pow+0xb8>
 80040c6:	bf00      	nop
 80040c8:	00000000 	.word	0x00000000
 80040cc:	3fe62e43 	.word	0x3fe62e43
 80040d0:	fefa39ef 	.word	0xfefa39ef
 80040d4:	3fe62e42 	.word	0x3fe62e42
 80040d8:	0ca86c39 	.word	0x0ca86c39
 80040dc:	be205c61 	.word	0xbe205c61
 80040e0:	72bea4d0 	.word	0x72bea4d0
 80040e4:	3e663769 	.word	0x3e663769
 80040e8:	c5d26bf1 	.word	0xc5d26bf1
 80040ec:	3ebbbd41 	.word	0x3ebbbd41
 80040f0:	af25de2c 	.word	0xaf25de2c
 80040f4:	3f11566a 	.word	0x3f11566a
 80040f8:	16bebd93 	.word	0x16bebd93
 80040fc:	3f66c16c 	.word	0x3f66c16c
 8004100:	5555553e 	.word	0x5555553e
 8004104:	3fc55555 	.word	0x3fc55555
 8004108:	fff00000 	.word	0xfff00000
 800410c:	3ff00000 	.word	0x3ff00000
 8004110:	4090cbff 	.word	0x4090cbff
 8004114:	3f6f3400 	.word	0x3f6f3400
 8004118:	3fe00000 	.word	0x3fe00000
 800411c:	652b82fe 	.word	0x652b82fe
 8004120:	3c971547 	.word	0x3c971547
 8004124:	4090cc00 	.word	0x4090cc00

08004128 <fabs>:
 8004128:	ec51 0b10 	vmov	r0, r1, d0
 800412c:	4602      	mov	r2, r0
 800412e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004132:	ec43 2b10 	vmov	d0, r2, r3
 8004136:	4770      	bx	lr

08004138 <scalbn>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	ec55 4b10 	vmov	r4, r5, d0
 800413e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004142:	4606      	mov	r6, r0
 8004144:	462b      	mov	r3, r5
 8004146:	b991      	cbnz	r1, 800416e <scalbn+0x36>
 8004148:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800414c:	4323      	orrs	r3, r4
 800414e:	d03d      	beq.n	80041cc <scalbn+0x94>
 8004150:	4b35      	ldr	r3, [pc, #212]	@ (8004228 <scalbn+0xf0>)
 8004152:	4620      	mov	r0, r4
 8004154:	4629      	mov	r1, r5
 8004156:	2200      	movs	r2, #0
 8004158:	f7fc f9fa 	bl	8000550 <__aeabi_dmul>
 800415c:	4b33      	ldr	r3, [pc, #204]	@ (800422c <scalbn+0xf4>)
 800415e:	429e      	cmp	r6, r3
 8004160:	4604      	mov	r4, r0
 8004162:	460d      	mov	r5, r1
 8004164:	da0f      	bge.n	8004186 <scalbn+0x4e>
 8004166:	a328      	add	r3, pc, #160	@ (adr r3, 8004208 <scalbn+0xd0>)
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	e01e      	b.n	80041ac <scalbn+0x74>
 800416e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004172:	4291      	cmp	r1, r2
 8004174:	d10b      	bne.n	800418e <scalbn+0x56>
 8004176:	4622      	mov	r2, r4
 8004178:	4620      	mov	r0, r4
 800417a:	4629      	mov	r1, r5
 800417c:	f7fc f832 	bl	80001e4 <__adddf3>
 8004180:	4604      	mov	r4, r0
 8004182:	460d      	mov	r5, r1
 8004184:	e022      	b.n	80041cc <scalbn+0x94>
 8004186:	460b      	mov	r3, r1
 8004188:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800418c:	3936      	subs	r1, #54	@ 0x36
 800418e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004192:	4296      	cmp	r6, r2
 8004194:	dd0d      	ble.n	80041b2 <scalbn+0x7a>
 8004196:	2d00      	cmp	r5, #0
 8004198:	a11d      	add	r1, pc, #116	@ (adr r1, 8004210 <scalbn+0xd8>)
 800419a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800419e:	da02      	bge.n	80041a6 <scalbn+0x6e>
 80041a0:	a11d      	add	r1, pc, #116	@ (adr r1, 8004218 <scalbn+0xe0>)
 80041a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8004210 <scalbn+0xd8>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	f7fc f9d0 	bl	8000550 <__aeabi_dmul>
 80041b0:	e7e6      	b.n	8004180 <scalbn+0x48>
 80041b2:	1872      	adds	r2, r6, r1
 80041b4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80041b8:	428a      	cmp	r2, r1
 80041ba:	dcec      	bgt.n	8004196 <scalbn+0x5e>
 80041bc:	2a00      	cmp	r2, #0
 80041be:	dd08      	ble.n	80041d2 <scalbn+0x9a>
 80041c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80041c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80041c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80041cc:	ec45 4b10 	vmov	d0, r4, r5
 80041d0:	bd70      	pop	{r4, r5, r6, pc}
 80041d2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80041d6:	da08      	bge.n	80041ea <scalbn+0xb2>
 80041d8:	2d00      	cmp	r5, #0
 80041da:	a10b      	add	r1, pc, #44	@ (adr r1, 8004208 <scalbn+0xd0>)
 80041dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041e0:	dac1      	bge.n	8004166 <scalbn+0x2e>
 80041e2:	a10f      	add	r1, pc, #60	@ (adr r1, 8004220 <scalbn+0xe8>)
 80041e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041e8:	e7bd      	b.n	8004166 <scalbn+0x2e>
 80041ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80041ee:	3236      	adds	r2, #54	@ 0x36
 80041f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80041f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80041f8:	4620      	mov	r0, r4
 80041fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004230 <scalbn+0xf8>)
 80041fc:	4629      	mov	r1, r5
 80041fe:	2200      	movs	r2, #0
 8004200:	e7d4      	b.n	80041ac <scalbn+0x74>
 8004202:	bf00      	nop
 8004204:	f3af 8000 	nop.w
 8004208:	c2f8f359 	.word	0xc2f8f359
 800420c:	01a56e1f 	.word	0x01a56e1f
 8004210:	8800759c 	.word	0x8800759c
 8004214:	7e37e43c 	.word	0x7e37e43c
 8004218:	8800759c 	.word	0x8800759c
 800421c:	fe37e43c 	.word	0xfe37e43c
 8004220:	c2f8f359 	.word	0xc2f8f359
 8004224:	81a56e1f 	.word	0x81a56e1f
 8004228:	43500000 	.word	0x43500000
 800422c:	ffff3cb0 	.word	0xffff3cb0
 8004230:	3c900000 	.word	0x3c900000

08004234 <with_errno>:
 8004234:	b510      	push	{r4, lr}
 8004236:	ed2d 8b02 	vpush	{d8}
 800423a:	eeb0 8a40 	vmov.f32	s16, s0
 800423e:	eef0 8a60 	vmov.f32	s17, s1
 8004242:	4604      	mov	r4, r0
 8004244:	f7ff f986 	bl	8003554 <__errno>
 8004248:	eeb0 0a48 	vmov.f32	s0, s16
 800424c:	eef0 0a68 	vmov.f32	s1, s17
 8004250:	ecbd 8b02 	vpop	{d8}
 8004254:	6004      	str	r4, [r0, #0]
 8004256:	bd10      	pop	{r4, pc}

08004258 <xflow>:
 8004258:	4603      	mov	r3, r0
 800425a:	b507      	push	{r0, r1, r2, lr}
 800425c:	ec51 0b10 	vmov	r0, r1, d0
 8004260:	b183      	cbz	r3, 8004284 <xflow+0x2c>
 8004262:	4602      	mov	r2, r0
 8004264:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004268:	e9cd 2300 	strd	r2, r3, [sp]
 800426c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004270:	f7fc f96e 	bl	8000550 <__aeabi_dmul>
 8004274:	ec41 0b10 	vmov	d0, r0, r1
 8004278:	2022      	movs	r0, #34	@ 0x22
 800427a:	b003      	add	sp, #12
 800427c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004280:	f7ff bfd8 	b.w	8004234 <with_errno>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	e7ee      	b.n	8004268 <xflow+0x10>
 800428a:	0000      	movs	r0, r0
 800428c:	0000      	movs	r0, r0
	...

08004290 <__math_uflow>:
 8004290:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004298 <__math_uflow+0x8>
 8004294:	f7ff bfe0 	b.w	8004258 <xflow>
 8004298:	00000000 	.word	0x00000000
 800429c:	10000000 	.word	0x10000000

080042a0 <__math_oflow>:
 80042a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80042a8 <__math_oflow+0x8>
 80042a4:	f7ff bfd8 	b.w	8004258 <xflow>
 80042a8:	00000000 	.word	0x00000000
 80042ac:	70000000 	.word	0x70000000

080042b0 <__ieee754_sqrt>:
 80042b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b4:	4a68      	ldr	r2, [pc, #416]	@ (8004458 <__ieee754_sqrt+0x1a8>)
 80042b6:	ec55 4b10 	vmov	r4, r5, d0
 80042ba:	43aa      	bics	r2, r5
 80042bc:	462b      	mov	r3, r5
 80042be:	4621      	mov	r1, r4
 80042c0:	d110      	bne.n	80042e4 <__ieee754_sqrt+0x34>
 80042c2:	4622      	mov	r2, r4
 80042c4:	4620      	mov	r0, r4
 80042c6:	4629      	mov	r1, r5
 80042c8:	f7fc f942 	bl	8000550 <__aeabi_dmul>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4620      	mov	r0, r4
 80042d2:	4629      	mov	r1, r5
 80042d4:	f7fb ff86 	bl	80001e4 <__adddf3>
 80042d8:	4604      	mov	r4, r0
 80042da:	460d      	mov	r5, r1
 80042dc:	ec45 4b10 	vmov	d0, r4, r5
 80042e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e4:	2d00      	cmp	r5, #0
 80042e6:	dc0e      	bgt.n	8004306 <__ieee754_sqrt+0x56>
 80042e8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80042ec:	4322      	orrs	r2, r4
 80042ee:	d0f5      	beq.n	80042dc <__ieee754_sqrt+0x2c>
 80042f0:	b19d      	cbz	r5, 800431a <__ieee754_sqrt+0x6a>
 80042f2:	4622      	mov	r2, r4
 80042f4:	4620      	mov	r0, r4
 80042f6:	4629      	mov	r1, r5
 80042f8:	f7fb ff72 	bl	80001e0 <__aeabi_dsub>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	f7fc fa50 	bl	80007a4 <__aeabi_ddiv>
 8004304:	e7e8      	b.n	80042d8 <__ieee754_sqrt+0x28>
 8004306:	152a      	asrs	r2, r5, #20
 8004308:	d115      	bne.n	8004336 <__ieee754_sqrt+0x86>
 800430a:	2000      	movs	r0, #0
 800430c:	e009      	b.n	8004322 <__ieee754_sqrt+0x72>
 800430e:	0acb      	lsrs	r3, r1, #11
 8004310:	3a15      	subs	r2, #21
 8004312:	0549      	lsls	r1, r1, #21
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0fa      	beq.n	800430e <__ieee754_sqrt+0x5e>
 8004318:	e7f7      	b.n	800430a <__ieee754_sqrt+0x5a>
 800431a:	462a      	mov	r2, r5
 800431c:	e7fa      	b.n	8004314 <__ieee754_sqrt+0x64>
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	3001      	adds	r0, #1
 8004322:	02dc      	lsls	r4, r3, #11
 8004324:	d5fb      	bpl.n	800431e <__ieee754_sqrt+0x6e>
 8004326:	1e44      	subs	r4, r0, #1
 8004328:	1b12      	subs	r2, r2, r4
 800432a:	f1c0 0420 	rsb	r4, r0, #32
 800432e:	fa21 f404 	lsr.w	r4, r1, r4
 8004332:	4323      	orrs	r3, r4
 8004334:	4081      	lsls	r1, r0
 8004336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800433a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800433e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004342:	07d2      	lsls	r2, r2, #31
 8004344:	bf5c      	itt	pl
 8004346:	005b      	lslpl	r3, r3, #1
 8004348:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800434c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004350:	bf58      	it	pl
 8004352:	0049      	lslpl	r1, r1, #1
 8004354:	2600      	movs	r6, #0
 8004356:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800435a:	106d      	asrs	r5, r5, #1
 800435c:	0049      	lsls	r1, r1, #1
 800435e:	2016      	movs	r0, #22
 8004360:	4632      	mov	r2, r6
 8004362:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004366:	1917      	adds	r7, r2, r4
 8004368:	429f      	cmp	r7, r3
 800436a:	bfde      	ittt	le
 800436c:	193a      	addle	r2, r7, r4
 800436e:	1bdb      	suble	r3, r3, r7
 8004370:	1936      	addle	r6, r6, r4
 8004372:	0fcf      	lsrs	r7, r1, #31
 8004374:	3801      	subs	r0, #1
 8004376:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800437a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800437e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004382:	d1f0      	bne.n	8004366 <__ieee754_sqrt+0xb6>
 8004384:	4604      	mov	r4, r0
 8004386:	2720      	movs	r7, #32
 8004388:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800438c:	429a      	cmp	r2, r3
 800438e:	eb00 0e0c 	add.w	lr, r0, ip
 8004392:	db02      	blt.n	800439a <__ieee754_sqrt+0xea>
 8004394:	d113      	bne.n	80043be <__ieee754_sqrt+0x10e>
 8004396:	458e      	cmp	lr, r1
 8004398:	d811      	bhi.n	80043be <__ieee754_sqrt+0x10e>
 800439a:	f1be 0f00 	cmp.w	lr, #0
 800439e:	eb0e 000c 	add.w	r0, lr, ip
 80043a2:	da42      	bge.n	800442a <__ieee754_sqrt+0x17a>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	db40      	blt.n	800442a <__ieee754_sqrt+0x17a>
 80043a8:	f102 0801 	add.w	r8, r2, #1
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	458e      	cmp	lr, r1
 80043b0:	bf88      	it	hi
 80043b2:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80043b6:	eba1 010e 	sub.w	r1, r1, lr
 80043ba:	4464      	add	r4, ip
 80043bc:	4642      	mov	r2, r8
 80043be:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80043c2:	3f01      	subs	r7, #1
 80043c4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80043c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80043cc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80043d0:	d1dc      	bne.n	800438c <__ieee754_sqrt+0xdc>
 80043d2:	4319      	orrs	r1, r3
 80043d4:	d01b      	beq.n	800440e <__ieee754_sqrt+0x15e>
 80043d6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800445c <__ieee754_sqrt+0x1ac>
 80043da:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004460 <__ieee754_sqrt+0x1b0>
 80043de:	e9da 0100 	ldrd	r0, r1, [sl]
 80043e2:	e9db 2300 	ldrd	r2, r3, [fp]
 80043e6:	f7fb fefb 	bl	80001e0 <__aeabi_dsub>
 80043ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4640      	mov	r0, r8
 80043f4:	4649      	mov	r1, r9
 80043f6:	f7fc fb27 	bl	8000a48 <__aeabi_dcmple>
 80043fa:	b140      	cbz	r0, 800440e <__ieee754_sqrt+0x15e>
 80043fc:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8004400:	e9da 0100 	ldrd	r0, r1, [sl]
 8004404:	e9db 2300 	ldrd	r2, r3, [fp]
 8004408:	d111      	bne.n	800442e <__ieee754_sqrt+0x17e>
 800440a:	3601      	adds	r6, #1
 800440c:	463c      	mov	r4, r7
 800440e:	1072      	asrs	r2, r6, #1
 8004410:	0863      	lsrs	r3, r4, #1
 8004412:	07f1      	lsls	r1, r6, #31
 8004414:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004418:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800441c:	bf48      	it	mi
 800441e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004422:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8004426:	4618      	mov	r0, r3
 8004428:	e756      	b.n	80042d8 <__ieee754_sqrt+0x28>
 800442a:	4690      	mov	r8, r2
 800442c:	e7be      	b.n	80043ac <__ieee754_sqrt+0xfc>
 800442e:	f7fb fed9 	bl	80001e4 <__adddf3>
 8004432:	e9da 8900 	ldrd	r8, r9, [sl]
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4640      	mov	r0, r8
 800443c:	4649      	mov	r1, r9
 800443e:	f7fc faf9 	bl	8000a34 <__aeabi_dcmplt>
 8004442:	b120      	cbz	r0, 800444e <__ieee754_sqrt+0x19e>
 8004444:	1ca0      	adds	r0, r4, #2
 8004446:	bf08      	it	eq
 8004448:	3601      	addeq	r6, #1
 800444a:	3402      	adds	r4, #2
 800444c:	e7df      	b.n	800440e <__ieee754_sqrt+0x15e>
 800444e:	1c63      	adds	r3, r4, #1
 8004450:	f023 0401 	bic.w	r4, r3, #1
 8004454:	e7db      	b.n	800440e <__ieee754_sqrt+0x15e>
 8004456:	bf00      	nop
 8004458:	7ff00000 	.word	0x7ff00000
 800445c:	20000088 	.word	0x20000088
 8004460:	20000080 	.word	0x20000080

08004464 <_init>:
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004466:	bf00      	nop
 8004468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446a:	bc08      	pop	{r3}
 800446c:	469e      	mov	lr, r3
 800446e:	4770      	bx	lr

08004470 <_fini>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	bf00      	nop
 8004474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004476:	bc08      	pop	{r3}
 8004478:	469e      	mov	lr, r3
 800447a:	4770      	bx	lr
